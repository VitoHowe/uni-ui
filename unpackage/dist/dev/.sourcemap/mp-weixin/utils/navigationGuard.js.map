{"version":3,"file":"navigationGuard.js","sources":["utils/navigationGuard.js"],"sourcesContent":["import { RouteGuard, LoginStateManager } from './auth.js'\r\n\r\n/**\r\n * 导航守卫管理器\r\n * 提供页面跳转时的权限检查功能\r\n */\r\nexport class NavigationGuard {\r\n  /**\r\n   * 检查页面访问权限\r\n   * @param {string} url - 目标页面URL\r\n   * @returns {boolean} 是否允许访问\r\n   */\r\n  static checkPageAccess(url) {\r\n    // 提取页面路径\r\n    const pagePath = this.extractPagePath(url)\r\n    console.log('🚦 检查页面访问权限:', pagePath)\r\n    \r\n    // 如果是公开页面，直接允许访问\r\n    if (RouteGuard.isPublicRoute(pagePath)) {\r\n      console.log('✅ 公开页面，允许访问')\r\n      return true\r\n    }\r\n    \r\n    // 如果是受保护页面，检查登录状态\r\n    if (RouteGuard.isProtectedRoute(pagePath)) {\r\n      const isLoggedIn = LoginStateManager.getLoginState()\r\n      \r\n      if (!isLoggedIn) {\r\n        console.log('❌ 受保护页面，需要登录')\r\n        this.handleUnauthorizedAccess(pagePath)\r\n        return false\r\n      }\r\n      \r\n      console.log('✅ 已登录，允许访问受保护页面')\r\n      return true\r\n    }\r\n    \r\n    // 其他页面默认允许访问\r\n    console.log('✅ 其他页面，默认允许访问')\r\n    return true\r\n  }\r\n  \r\n  /**\r\n   * 安全导航 - 带权限检查的页面跳转\r\n   * @param {Object} options - 跳转选项\r\n   * @param {string} options.url - 目标URL\r\n   * @param {string} options.type - 跳转类型: navigateTo|redirectTo|reLaunch|switchTab\r\n   * @param {Object} options.extra - 额外参数\r\n   * @returns {Promise<boolean>} 跳转是否成功\r\n   */\r\n  static async safeNavigate(options) {\r\n    const { url, type = 'navigateTo', extra = {} } = options\r\n    \r\n    try {\r\n      // 检查访问权限\r\n      if (!this.checkPageAccess(url)) {\r\n        return false\r\n      }\r\n      \r\n      // 执行跳转\r\n      const navigationMethod = uni[type]\r\n      if (!navigationMethod) {\r\n        throw new Error(`不支持的导航类型: ${type}`)\r\n      }\r\n      \r\n      await new Promise((resolve, reject) => {\r\n        navigationMethod({\r\n          url,\r\n          ...extra,\r\n          success: resolve,\r\n          fail: reject\r\n        })\r\n      })\r\n      \r\n      console.log('✅ 页面跳转成功:', url)\r\n      return true\r\n      \r\n    } catch (error) {\r\n      console.error('❌ 页面跳转失败:', error)\r\n      uni.showToast({\r\n        title: '页面跳转失败',\r\n        icon: 'error'\r\n      })\r\n      return false\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 处理未授权访问\r\n   * @param {string} targetPath - 目标页面路径\r\n   */\r\n  static handleUnauthorizedAccess(targetPath) {\r\n    // 保存目标路径\r\n    RouteGuard.saveReturnPath(targetPath)\r\n    \r\n    // 显示登录提示\r\n    uni.showModal({\r\n      title: '需要登录',\r\n      content: '访问此页面需要登录，是否立即登录？',\r\n      confirmText: '立即登录',\r\n      cancelText: '稍后再说',\r\n      success: (res) => {\r\n        if (res.confirm) {\r\n          // 跳转到登录页面\r\n          uni.navigateTo({\r\n            url: '/pages/login/login'\r\n          })\r\n        }\r\n      }\r\n    })\r\n  }\r\n  \r\n  /**\r\n   * 从URL中提取页面路径\r\n   * @param {string} url - 完整URL\r\n   * @returns {string} 页面路径\r\n   */\r\n  static extractPagePath(url) {\r\n    // 移除查询参数\r\n    const path = url.split('?')[0]\r\n    \r\n    // 如果不是以/开头，添加/\r\n    return path.startsWith('/') ? path : `/${path}`\r\n  }\r\n  \r\n  /**\r\n   * 自动登录拦截器 - 在应用启动时调用\r\n   */\r\n  static setupAutoLoginInterceptor() {\r\n    console.log('🛡️ 设置自动登录拦截器')\r\n    \r\n    // 拦截页面跳转方法\r\n    const originalMethods = {\r\n      navigateTo: uni.navigateTo,\r\n      redirectTo: uni.redirectTo,\r\n      reLaunch: uni.reLaunch,\r\n      switchTab: uni.switchTab\r\n    }\r\n    \r\n    // 包装导航方法\r\n    Object.keys(originalMethods).forEach(method => {\r\n      uni[method] = (options) => {\r\n        // 检查权限\r\n        if (options.url && !this.checkPageAccess(options.url)) {\r\n          return\r\n        }\r\n        \r\n        // 调用原始方法\r\n        return originalMethods[method](options)\r\n      }\r\n    })\r\n  }\r\n  \r\n  /**\r\n   * 检查当前页面权限（用于页面onShow时调用）\r\n   */\r\n  static checkCurrentPagePermission() {\r\n    const pages = getCurrentPages()\r\n    if (pages.length === 0) return\r\n    \r\n    const currentPage = pages[pages.length - 1]\r\n    const currentPath = `/${currentPage.route}`\r\n    \r\n    // 如果是受保护页面且未登录，提示用户\r\n    if (RouteGuard.isProtectedRoute(currentPath)) {\r\n      const isLoggedIn = LoginStateManager.getLoginState()\r\n      if (!isLoggedIn) {\r\n        console.log('⚠️ 当前页面需要登录权限')\r\n        \r\n        // 延迟显示提示，避免与页面加载冲突\r\n        setTimeout(() => {\r\n          uni.showToast({\r\n            title: '建议登录后使用完整功能',\r\n            icon: 'none',\r\n            duration: 2000\r\n          })\r\n        }, 1000)\r\n      }\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 登录成功后的导航处理\r\n   */\r\n  static handleLoginSuccess() {\r\n    // 获取并清除保存的返回路径\r\n    const returnPath = RouteGuard.getAndClearReturnPath()\r\n    \r\n    console.log('🎉 登录成功，准备跳转:', returnPath)\r\n    \r\n    // 跳转到目标页面\r\n    if (returnPath && returnPath !== '/pages/index/index') {\r\n      uni.redirectTo({\r\n        url: returnPath,\r\n        fail: () => {\r\n          // 如果跳转失败，回到首页\r\n          uni.reLaunch({\r\n            url: '/pages/index/index'\r\n          })\r\n        }\r\n      })\r\n    } else {\r\n      // 跳转到首页\r\n      uni.reLaunch({\r\n        url: '/pages/index/index'\r\n      })\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * 便捷导航方法\r\n */\r\nexport const safeNavigateTo = (url, extra = {}) => {\r\n  return NavigationGuard.safeNavigate({ url, type: 'navigateTo', extra })\r\n}\r\n\r\nexport const safeRedirectTo = (url, extra = {}) => {\r\n  return NavigationGuard.safeNavigate({ url, type: 'redirectTo', extra })\r\n}\r\n\r\nexport const safeReLaunch = (url, extra = {}) => {\r\n  return NavigationGuard.safeNavigate({ url, type: 'reLaunch', extra })\r\n}\r\n\r\nexport const safeSwitchTab = (url, extra = {}) => {\r\n  return NavigationGuard.safeNavigate({ url, type: 'switchTab', extra })\r\n}\r\n\r\n// 默认导出\r\nexport default NavigationGuard\r\n"],"names":["uni","RouteGuard","LoginStateManager"],"mappings":"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"}