{"version":3,"file":"testHelpers.js","sources":["utils/testHelpers.js"],"sourcesContent":["/**\r\n * 测试辅助工具\r\n * 用于验证微信登录系统的各项功能\r\n */\r\n\r\nimport { useAuthStore } from '@/stores/auth.js'\r\nimport { TokenManager, UserManager, LoginStateManager } from './auth.js'\r\nimport { request } from './request.js'\r\nimport { API_ENDPOINTS } from './constants.js'\r\n\r\nexport class AuthTestHelper {\r\n  /**\r\n   * 运行完整的认证系统测试\r\n   */\r\n  static async runFullTest() {\r\n    console.log('🧪 开始认证系统综合测试')\r\n    const results = []\r\n    \r\n    try {\r\n      // 测试1: Token管理器\r\n      results.push(await this.testTokenManager())\r\n      \r\n      // 测试2: 用户管理器  \r\n      results.push(await this.testUserManager())\r\n      \r\n      // 测试3: 登录状态管理\r\n      results.push(await this.testLoginStateManager())\r\n      \r\n      // 测试4: 网络请求系统\r\n      results.push(await this.testRequestSystem())\r\n      \r\n      // 测试5: 认证Store\r\n      results.push(await this.testAuthStore())\r\n      \r\n      // 汇总结果\r\n      const passedTests = results.filter(r => r.passed).length\r\n      const totalTests = results.length\r\n      \r\n      console.log(`🎯 测试完成: ${passedTests}/${totalTests} 通过`)\r\n      \r\n      // 显示结果\r\n      this.showTestResults(results, passedTests, totalTests)\r\n      \r\n    } catch (error) {\r\n      console.error('❌ 测试运行失败:', error)\r\n      uni.showToast({\r\n        title: '测试运行失败',\r\n        icon: 'error'\r\n      })\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 测试Token管理器\r\n   */\r\n  static async testTokenManager() {\r\n    console.log('📝 测试Token管理器...')\r\n    \r\n    try {\r\n      // 清空现有Token\r\n      TokenManager.clearTokens()\r\n      \r\n      // 测试设置Token\r\n      const testTokenData = {\r\n        accessToken: 'test_access_token',\r\n        refreshToken: 'test_refresh_token',\r\n        expiresIn: '2h'\r\n      }\r\n      TokenManager.setTokens(testTokenData)\r\n      \r\n      // 验证Token获取\r\n      const accessToken = TokenManager.getAccessToken()\r\n      const refreshToken = TokenManager.getRefreshToken()\r\n      \r\n      if (accessToken !== testTokenData.accessToken || refreshToken !== testTokenData.refreshToken) {\r\n        throw new Error('Token设置或获取失败')\r\n      }\r\n      \r\n      // 测试Token刷新检查\r\n      const shouldRefresh = TokenManager.shouldRefreshToken()\r\n      const isExpired = TokenManager.isTokenExpired()\r\n      \r\n      console.log('✅ Token管理器测试通过')\r\n      return { name: 'Token管理器', passed: true, message: '所有功能正常' }\r\n      \r\n    } catch (error) {\r\n      console.error('❌ Token管理器测试失败:', error)\r\n      return { name: 'Token管理器', passed: false, message: error.message }\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 测试用户管理器\r\n   */\r\n  static async testUserManager() {\r\n    console.log('👤 测试用户管理器...')\r\n    \r\n    try {\r\n      // 清空现有用户信息\r\n      UserManager.clearUserInfo()\r\n      \r\n      // 测试设置用户信息\r\n      const testUser = {\r\n        id: 1,\r\n        nickname: '测试用户',\r\n        avatar_url: '/static/avatar.png',\r\n        role_id: 2,\r\n        status: 1\r\n      }\r\n      UserManager.setUserInfo(testUser)\r\n      \r\n      // 验证用户信息获取\r\n      const userInfo = UserManager.getUserInfo()\r\n      if (!userInfo || userInfo.id !== testUser.id) {\r\n        throw new Error('用户信息设置或获取失败')\r\n      }\r\n      \r\n      // 测试权限检查\r\n      const isAdmin = UserManager.isAdmin()\r\n      const isActive = UserManager.isUserActive()\r\n      \r\n      if (isAdmin !== false || isActive !== true) {\r\n        throw new Error('权限检查逻辑错误')\r\n      }\r\n      \r\n      console.log('✅ 用户管理器测试通过')\r\n      return { name: '用户管理器', passed: true, message: '所有功能正常' }\r\n      \r\n    } catch (error) {\r\n      console.error('❌ 用户管理器测试失败:', error)\r\n      return { name: '用户管理器', passed: false, message: error.message }\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 测试登录状态管理\r\n   */\r\n  static async testLoginStateManager() {\r\n    console.log('🔐 测试登录状态管理...')\r\n    \r\n    try {\r\n      // 测试登录状态设置和获取\r\n      LoginStateManager.setLoginState(true)\r\n      const isLoggedIn = LoginStateManager.getLoginState()\r\n      \r\n      if (!isLoggedIn) {\r\n        throw new Error('登录状态设置失败')\r\n      }\r\n      \r\n      // 测试登出\r\n      LoginStateManager.logout()\r\n      const isLoggedInAfterLogout = LoginStateManager.getLoginState()\r\n      const tokenAfterLogout = TokenManager.getAccessToken()\r\n      const userAfterLogout = UserManager.getUserInfo()\r\n      \r\n      if (isLoggedInAfterLogout || tokenAfterLogout || userAfterLogout) {\r\n        throw new Error('登出处理不完整')\r\n      }\r\n      \r\n      console.log('✅ 登录状态管理测试通过')\r\n      return { name: '登录状态管理', passed: true, message: '所有功能正常' }\r\n      \r\n    } catch (error) {\r\n      console.error('❌ 登录状态管理测试失败:', error)\r\n      return { name: '登录状态管理', passed: false, message: error.message }\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 测试网络请求系统\r\n   */\r\n  static async testRequestSystem() {\r\n    console.log('🌐 测试网络请求系统...')\r\n    \r\n    try {\r\n      // 测试请求构建\r\n      const testUrl = API_ENDPOINTS.AUTH.PROFILE\r\n      if (!testUrl || !testUrl.startsWith('/')) {\r\n        throw new Error('API端点配置错误')\r\n      }\r\n      \r\n      // 测试错误创建\r\n      const testError = request.createError('测试错误', 'TEST_ERROR')\r\n      if (testError.message !== '测试错误' || testError.type !== 'TEST_ERROR') {\r\n        throw new Error('错误对象创建失败')\r\n      }\r\n      \r\n      // 测试URL构建\r\n      const fullUrl = request.buildFullUrl('/test')\r\n      if (!fullUrl.includes('localhost:3000')) {\r\n        throw new Error('URL构建失败')\r\n      }\r\n      \r\n      console.log('✅ 网络请求系统测试通过')\r\n      return { name: '网络请求系统', passed: true, message: '基础功能正常' }\r\n      \r\n    } catch (error) {\r\n      console.error('❌ 网络请求系统测试失败:', error)\r\n      return { name: '网络请求系统', passed: false, message: error.message }\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 测试认证Store\r\n   */\r\n  static async testAuthStore() {\r\n    console.log('🏪 测试认证Store...')\r\n    \r\n    try {\r\n      const authStore = useAuthStore()\r\n      \r\n      // 测试初始状态\r\n      if (typeof authStore.isLoggedIn !== 'boolean') {\r\n        throw new Error('Store状态初始化失败')\r\n      }\r\n      \r\n      // 测试计算属性\r\n      const isAuthenticated = authStore.isAuthenticated\r\n      const userNickname = authStore.userNickname\r\n      const userAvatar = authStore.userAvatar\r\n      \r\n      if (typeof isAuthenticated !== 'boolean' || \r\n          typeof userNickname !== 'string' || \r\n          typeof userAvatar !== 'string') {\r\n        throw new Error('Store计算属性错误')\r\n      }\r\n      \r\n      // 测试状态清空\r\n      authStore.clearAuthData()\r\n      \r\n      if (authStore.isLoggedIn || authStore.user) {\r\n        throw new Error('Store状态清空失败')\r\n      }\r\n      \r\n      console.log('✅ 认证Store测试通过')\r\n      return { name: '认证Store', passed: true, message: '所有功能正常' }\r\n      \r\n    } catch (error) {\r\n      console.error('❌ 认证Store测试失败:', error)\r\n      return { name: '认证Store', passed: false, message: error.message }\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 显示测试结果\r\n   */\r\n  static showTestResults(results, passed, total) {\r\n    const resultText = results.map(r => \r\n      `${r.passed ? '✅' : '❌'} ${r.name}: ${r.message}`\r\n    ).join('\\n')\r\n    \r\n    const title = passed === total ? '🎉 所有测试通过' : '⚠️ 部分测试失败'\r\n    const summary = `通过: ${passed}/${total}`\r\n    \r\n    uni.showModal({\r\n      title,\r\n      content: `${summary}\\n\\n${resultText}`,\r\n      showCancel: false,\r\n      confirmText: '确定'\r\n    })\r\n  }\r\n  \r\n  /**\r\n   * 模拟登录测试\r\n   */\r\n  static async simulateLogin() {\r\n    console.log('🎭 模拟登录测试...')\r\n    \r\n    try {\r\n      const authStore = useAuthStore()\r\n      \r\n      // 模拟登录数据\r\n      const mockAuthData = {\r\n        accessToken: 'mock_access_token_' + Date.now(),\r\n        refreshToken: 'mock_refresh_token_' + Date.now(),\r\n        expiresIn: '2h',\r\n        user: {\r\n          id: 999,\r\n          nickname: '测试用户',\r\n          avatar_url: '/static/uni.png',\r\n          role_id: 2,\r\n          status: 1\r\n        }\r\n      }\r\n      \r\n      // 保存认证数据\r\n      authStore.saveAuthData(mockAuthData)\r\n      \r\n      // 验证登录状态\r\n      if (!authStore.isAuthenticated) {\r\n        throw new Error('模拟登录失败')\r\n      }\r\n      \r\n      uni.showToast({\r\n        title: '模拟登录成功',\r\n        icon: 'success'\r\n      })\r\n      \r\n      console.log('✅ 模拟登录成功')\r\n      return true\r\n      \r\n    } catch (error) {\r\n      console.error('❌ 模拟登录失败:', error)\r\n      uni.showToast({\r\n        title: '模拟登录失败',\r\n        icon: 'error'\r\n      })\r\n      return false\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 测试微信Code管理机制\r\n   */\r\n  static async testWechatCodeManager() {\r\n    console.log('🧪 测试微信Code管理机制...')\r\n    \r\n    try {\r\n      const { WechatAuth } = await import('./auth.js')\r\n      \r\n      // 测试1: 清除code缓存\r\n      WechatAuth.clearCodeCache()\r\n      console.log('✅ Code缓存清除测试通过')\r\n      \r\n      // 测试2: 检查内部状态\r\n      if (WechatAuth._lastCode !== null || WechatAuth._codeTimestamp !== 0) {\r\n        throw new Error('Code缓存清除失败')\r\n      }\r\n      \r\n      console.log('✅ 微信Code管理机制测试通过')\r\n      \r\n      uni.showToast({\r\n        title: 'Code管理测试通过',\r\n        icon: 'success'\r\n      })\r\n      \r\n      return true\r\n      \r\n    } catch (error) {\r\n      console.error('❌ 微信Code管理机制测试失败:', error)\r\n      \r\n      uni.showToast({\r\n        title: 'Code管理测试失败',\r\n        icon: 'error'\r\n      })\r\n      \r\n      return false\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 测试登录重试机制\r\n   */\r\n  static async testLoginRetryMechanism() {\r\n    console.log('🔄 测试登录重试机制...')\r\n    \r\n    try {\r\n      const authStore = useAuthStore()\r\n      \r\n      // 测试code相关错误检查\r\n      const codeError = new Error('微信API错误: code been used')\r\n      const isCodeError = authStore.isCodeRelatedError(codeError)\r\n      \r\n      if (!isCodeError) {\r\n        throw new Error('code错误检测失败')\r\n      }\r\n      \r\n      // 测试其他错误\r\n      const otherError = new Error('网络连接失败')\r\n      const isOtherCodeError = authStore.isCodeRelatedError(otherError)\r\n      \r\n      if (isOtherCodeError) {\r\n        throw new Error('非code错误误判')\r\n      }\r\n      \r\n      console.log('✅ 登录重试机制测试通过')\r\n      \r\n      uni.showToast({\r\n        title: '重试机制测试通过',\r\n        icon: 'success'\r\n      })\r\n      \r\n      return true\r\n      \r\n    } catch (error) {\r\n      console.error('❌ 登录重试机制测试失败:', error)\r\n      \r\n      uni.showToast({\r\n        title: '重试机制测试失败',\r\n        icon: 'error'\r\n      })\r\n      \r\n      return false\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 清空所有测试数据\r\n   */\r\n  static clearTestData() {\r\n    console.log('🧹 清空测试数据...')\r\n    \r\n    const authStore = useAuthStore()\r\n    authStore.clearAuthData()\r\n    \r\n    uni.showToast({\r\n      title: '测试数据已清空',\r\n      icon: 'success'\r\n    })\r\n  }\r\n}\r\n\r\n// 默认导出\r\nexport default AuthTestHelper\r\n"],"names":["uni","TokenManager","UserManager","LoginStateManager","API_ENDPOINTS","request","useAuthStore"],"mappings":"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"}