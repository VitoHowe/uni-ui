{"version":3,"file":"request.js","sources":["utils/request.js"],"sourcesContent":["import { API_CONFIG, HTTP_STATUS, ERROR_TYPES, API_ENDPOINTS } from './constants.js'\r\nimport { TokenManager, LoginStateManager } from './auth.js'\r\n\r\n/**\r\n * 网络请求管理器\r\n * 提供统一的API请求接口，包含认证、重试、错误处理等功能\r\n */\r\nexport class RequestManager {\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor() {\r\n    this.pendingRequests = new Map() // 待处理请求队列\r\n    this.refreshingToken = false     // 是否正在刷新Token\r\n    this.refreshPromise = null       // Token刷新Promise\r\n  }\r\n  \r\n  /**\r\n   * 发起HTTP请求\r\n   * @param {Object} options - 请求配置\r\n   * @param {string} options.url - 请求URL\r\n   * @param {string} options.method - 请求方法 GET/POST/PUT/DELETE\r\n   * @param {Object} options.data - 请求数据\r\n   * @param {Object} options.header - 请求头\r\n   * @param {boolean} options.needAuth - 是否需要认证 默认true\r\n   * @param {boolean} options.showLoading - 是否显示加载提示 默认true\r\n   * @param {number} options.retryCount - 重试次数 默认0\r\n   * @returns {Promise<any>} 请求结果\r\n   */\r\n  async request(options) {\r\n    const {\r\n      url,\r\n      method = 'GET',\r\n      data = {},\r\n      header = {},\r\n      needAuth = true,\r\n      showLoading = true,\r\n      retryCount = 0\r\n    } = options\r\n    \r\n    // 显示加载提示\r\n    if (showLoading) {\r\n      uni.showLoading({\r\n        title: '加载中...',\r\n        mask: true\r\n      })\r\n    }\r\n    \r\n    try {\r\n      // 构建完整URL\r\n      const fullUrl = this.buildFullUrl(url)\r\n      \r\n      // 构建请求头\r\n      const requestHeader = await this.buildHeaders(header, needAuth)\r\n      \r\n      // 发起请求\r\n      const response = await this.performRequest({\r\n        url: fullUrl,\r\n        method: method.toUpperCase(),\r\n        data,\r\n        header: requestHeader\r\n      })\r\n      \r\n      // 处理响应\r\n      return await this.handleResponse(response)\r\n      \r\n    } catch (error) {\r\n      // 错误处理\r\n      return await this.handleError(error, options, retryCount)\r\n    } finally {\r\n      // 隐藏加载提示\r\n      if (showLoading) {\r\n        uni.hideLoading()\r\n      }\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * GET请求\r\n   * @param {string} url - 请求URL\r\n   * @param {Object} params - 查询参数\r\n   * @param {Object} options - 其他选项\r\n   * @returns {Promise<any>} 响应数据\r\n   */\r\n  get(url, params = {}, options = {}) {\r\n    const queryString = this.buildQueryString(params)\r\n    const fullUrl = queryString ? `${url}?${queryString}` : url\r\n    \r\n    return this.request({\r\n      url: fullUrl,\r\n      method: 'GET',\r\n      ...options\r\n    })\r\n  }\r\n  \r\n  /**\r\n   * POST请求\r\n   * @param {string} url - 请求URL\r\n   * @param {Object} data - 请求数据\r\n   * @param {Object} options - 其他选项\r\n   * @returns {Promise<any>} 响应数据\r\n   */\r\n  post(url, data = {}, options = {}) {\r\n    return this.request({\r\n      url,\r\n      method: 'POST',\r\n      data,\r\n      ...options\r\n    })\r\n  }\r\n  \r\n  /**\r\n   * PUT请求\r\n   * @param {string} url - 请求URL\r\n   * @param {Object} data - 请求数据\r\n   * @param {Object} options - 其他选项\r\n   * @returns {Promise<any>} 响应数据\r\n   */\r\n  put(url, data = {}, options = {}) {\r\n    return this.request({\r\n      url,\r\n      method: 'PUT',\r\n      data,\r\n      ...options\r\n    })\r\n  }\r\n  \r\n  /**\r\n   * DELETE请求\r\n   * @param {string} url - 请求URL\r\n   * @param {Object} options - 其他选项\r\n   * @returns {Promise<any>} 响应数据\r\n   */\r\n  delete(url, options = {}) {\r\n    return this.request({\r\n      url,\r\n      method: 'DELETE',\r\n      ...options\r\n    })\r\n  }\r\n  \r\n  /**\r\n   * 文件上传\r\n   * @param {string} url - 上传URL\r\n   * @param {string} filePath - 文件路径\r\n   * @param {Object} formData - 表单数据\r\n   * @param {Object} options - 其他选项\r\n   * @returns {Promise<any>} 上传结果\r\n   */\r\n  async upload(url, filePath, formData = {}, options = {}) {\r\n    const { needAuth = true, showProgress = true } = options\r\n    \r\n    try {\r\n      // 构建完整URL\r\n      const fullUrl = this.buildFullUrl(url)\r\n      \r\n      // 构建请求头\r\n      const header = await this.buildHeaders({}, needAuth)\r\n      console.log(fullUrl,filePath,formData,'header', header)\r\n      \r\n      return new Promise((resolve, reject) => {\r\n        const uploadTask = uni.uploadFile({\r\n          url: fullUrl,\r\n          filePath,\r\n          name: 'file',\r\n          formData,\r\n          header,\r\n          success: (res) => {\r\n            try {\r\n              const data = JSON.parse(res.data)\r\n              if (data.code === HTTP_STATUS.OK) {\r\n                resolve(data.data)\r\n              } else {\r\n                reject(new Error(data.message || '上传失败'))\r\n              }\r\n            } catch (error) {\r\n              reject(new Error('响应数据解析失败'))\r\n            }\r\n          },\r\n          fail: (error) => {\r\n            reject(new Error(error.errMsg || '上传失败'))\r\n          }\r\n        })\r\n        \r\n        // 显示上传进度\r\n        if (showProgress) {\r\n          uploadTask.onProgressUpdate((res) => {\r\n            console.log('上传进度:', res.progress + '%')\r\n            // 可以在这里更新UI进度条\r\n          })\r\n        }\r\n      })\r\n    } catch (error) {\r\n      throw this.createError('上传失败', ERROR_TYPES.NETWORK_ERROR)\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 构建完整URL\r\n   * @param {string} url - 相对URL\r\n   * @returns {string} 完整URL\r\n   */\r\n  buildFullUrl(url) {\r\n    if (url.startsWith('http')) {\r\n      return url\r\n    }\r\n    return `${API_CONFIG.BASE_URL}${url}`\r\n  }\r\n  \r\n  /**\r\n   * 构建查询字符串\r\n   * @param {Object} params - 查询参数\r\n   * @returns {string} 查询字符串\r\n   */\r\n  buildQueryString(params) {\r\n    const queryPairs = []\r\n    for (const [key, value] of Object.entries(params)) {\r\n      if (value !== null && value !== undefined && value !== '') {\r\n        queryPairs.push(`${encodeURIComponent(key)}=${encodeURIComponent(value)}`)\r\n      }\r\n    }\r\n    return queryPairs.join('&')\r\n  }\r\n  \r\n  /**\r\n   * 构建请求头\r\n   * @param {Object} customHeader - 自定义请求头\r\n   * @param {boolean} needAuth - 是否需要认证\r\n   * @returns {Promise<Object>} 请求头对象\r\n   */\r\n  async buildHeaders(customHeader = {}, needAuth = true) {\r\n    const headers = {\r\n      'Content-Type': 'application/json',\r\n      ...customHeader\r\n    }\r\n    \r\n    if (needAuth) {\r\n      const accessToken = TokenManager.getAccessToken()\r\n      if (accessToken) {\r\n        headers.Authorization = `Bearer ${accessToken}`\r\n      }\r\n      \r\n      // 检查Token是否需要刷新\r\n      if (TokenManager.shouldRefreshToken()) {\r\n        await this.refreshTokenIfNeeded()\r\n        const newToken = TokenManager.getAccessToken()\r\n        if (newToken) {\r\n          headers.Authorization = `Bearer ${newToken}`\r\n        }\r\n      }\r\n    }\r\n    \r\n    return headers\r\n  }\r\n  \r\n  /**\r\n   * 执行HTTP请求\r\n   * @param {Object} config - 请求配置\r\n   * @returns {Promise<Object>} 请求响应\r\n   */\r\n  performRequest(config) {\r\n    return new Promise((resolve, reject) => {\r\n      uni.request({\r\n        ...config,\r\n        timeout: API_CONFIG.TIMEOUT,\r\n        success: resolve,\r\n        fail: reject\r\n      })\r\n    })\r\n  }\r\n  \r\n  /**\r\n   * 处理响应数据\r\n   * @param {Object} response - 原始响应\r\n   * @returns {Promise<any>} 处理后的数据\r\n   */\r\n  async handleResponse(response) {\r\n    const { statusCode, data } = response\r\n    \r\n    console.log('📡 API响应:', { statusCode, data })\r\n    \r\n    // HTTP状态码检查\r\n    if (statusCode !== HTTP_STATUS.OK) {\r\n      throw this.createHttpError(statusCode, data)\r\n    }\r\n    \r\n    // 业务状态码检查\r\n    if (data.code !== HTTP_STATUS.OK) {\r\n      if (data.code === HTTP_STATUS.UNAUTHORIZED) {\r\n        await this.handleAuthError()\r\n        throw this.createError(data.message || '认证失败', ERROR_TYPES.AUTH_ERROR)\r\n      }\r\n      throw this.createError(data.message || '请求失败', ERROR_TYPES.BUSINESS_ERROR)\r\n    }\r\n    \r\n    return data.data\r\n  }\r\n  \r\n  /**\r\n   * 处理请求错误\r\n   * @param {Error} error - 错误对象\r\n   * @param {Object} originalOptions - 原始请求选项\r\n   * @param {number} retryCount - 已重试次数\r\n   * @returns {Promise<any>} 处理结果\r\n   */\r\n  async handleError(error, originalOptions, retryCount) {\r\n    console.error('❌ 请求失败:', error)\r\n    \r\n    // 网络错误重试\r\n    if (this.isNetworkError(error) && retryCount < API_CONFIG.MAX_RETRY_COUNT) {\r\n      console.log(`🔄 网络错误，准备重试 (${retryCount + 1}/${API_CONFIG.MAX_RETRY_COUNT})`)\r\n      await this.delay(1000 * (retryCount + 1)) // 递增延迟\r\n      return this.request({ ...originalOptions, retryCount: retryCount + 1 })\r\n    }\r\n    \r\n    // Token过期错误处理\r\n    if (this.isAuthError(error)) {\r\n      try {\r\n        await this.refreshTokenAndRetry()\r\n        return this.request(originalOptions)\r\n      } catch (refreshError) {\r\n        await this.handleAuthError()\r\n        throw this.createError('认证失败，请重新登录', ERROR_TYPES.AUTH_ERROR)\r\n      }\r\n    }\r\n    \r\n    // 创建统一错误格式\r\n    throw this.createRequestError(error)\r\n  }\r\n  \r\n  /**\r\n   * 刷新Token（如果需要）\r\n   * @returns {Promise<void>}\r\n   */\r\n  async refreshTokenIfNeeded() {\r\n    if (!TokenManager.shouldRefreshToken()) return\r\n    \r\n    if (this.refreshingToken) {\r\n      // 如果正在刷新，等待刷新完成\r\n      await this.refreshPromise\r\n      return\r\n    }\r\n    \r\n    try {\r\n      this.refreshingToken = true\r\n      this.refreshPromise = this.refreshToken()\r\n      await this.refreshPromise\r\n    } finally {\r\n      this.refreshingToken = false\r\n      this.refreshPromise = null\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 刷新Token\r\n   * @returns {Promise<void>}\r\n   */\r\n  async refreshToken() {\r\n    const refreshToken = TokenManager.getRefreshToken()\r\n    if (!refreshToken) {\r\n      throw new Error('没有刷新令牌')\r\n    }\r\n    \r\n    try {\r\n      console.log('🔄 开始刷新Token')\r\n      \r\n      const response = await this.performRequest({\r\n        url: this.buildFullUrl(API_ENDPOINTS.AUTH.REFRESH),\r\n        method: 'POST',\r\n        data: { refreshToken },\r\n        header: { 'Content-Type': 'application/json' }\r\n      })\r\n      \r\n      const data = await this.handleResponse(response)\r\n      TokenManager.setTokens(data)\r\n      \r\n      console.log('✅ Token刷新成功')\r\n    } catch (error) {\r\n      console.error('❌ Token刷新失败:', error)\r\n      throw error\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 刷新Token并重试请求\r\n   * @returns {Promise<void>}\r\n   */\r\n  async refreshTokenAndRetry() {\r\n    await this.refreshToken()\r\n  }\r\n  \r\n  /**\r\n   * 处理认证错误\r\n   * @returns {Promise<void>}\r\n   */\r\n  async handleAuthError() {\r\n    console.log('🔐 认证失败，清除登录状态')\r\n    LoginStateManager.logout()\r\n    \r\n    // 跳转到登录页面\r\n    uni.reLaunch({\r\n      url: '/pages/login/login'\r\n    })\r\n  }\r\n  \r\n  /**\r\n   * 创建HTTP错误\r\n   * @param {number} statusCode - HTTP状态码\r\n   * @param {any} data - 响应数据\r\n   * @returns {Error} 错误对象\r\n   */\r\n  createHttpError(statusCode, data) {\r\n    let message = '请求失败'\r\n    let type = ERROR_TYPES.NETWORK_ERROR\r\n    \r\n    switch (statusCode) {\r\n      case HTTP_STATUS.BAD_REQUEST:\r\n        message = '请求参数错误'\r\n        break\r\n      case HTTP_STATUS.UNAUTHORIZED:\r\n        message = '认证失败'\r\n        type = ERROR_TYPES.AUTH_ERROR\r\n        break\r\n      case HTTP_STATUS.FORBIDDEN:\r\n        message = '权限不足'\r\n        type = ERROR_TYPES.AUTH_ERROR\r\n        break\r\n      case HTTP_STATUS.NOT_FOUND:\r\n        message = '请求的资源不存在'\r\n        break\r\n      case HTTP_STATUS.INTERNAL_SERVER_ERROR:\r\n        message = '服务器内部错误'\r\n        break\r\n      default:\r\n        message = `请求失败 (${statusCode})`\r\n    }\r\n    \r\n    return this.createError(data?.message || message, type)\r\n  }\r\n  \r\n  /**\r\n   * 创建请求错误\r\n   * @param {Error} originalError - 原始错误\r\n   * @returns {Error} 格式化错误\r\n   */\r\n  createRequestError(originalError) {\r\n    if (originalError.type) {\r\n      return originalError // 已经是格式化的错误\r\n    }\r\n    \r\n    let message = '网络请求失败'\r\n    let type = ERROR_TYPES.NETWORK_ERROR\r\n    \r\n    if (originalError.errMsg) {\r\n      if (originalError.errMsg.includes('timeout')) {\r\n        message = '请求超时，请检查网络连接'\r\n        type = ERROR_TYPES.TIMEOUT_ERROR\r\n      } else if (originalError.errMsg.includes('fail')) {\r\n        message = '网络连接失败，请检查网络设置'\r\n      }\r\n    }\r\n    \r\n    return this.createError(message, type)\r\n  }\r\n  \r\n  /**\r\n   * 创建统一错误对象\r\n   * @param {string} message - 错误消息\r\n   * @param {string} type - 错误类型\r\n   * @returns {Error} 错误对象\r\n   */\r\n  createError(message, type) {\r\n    const error = new Error(message)\r\n    error.type = type\r\n    return error\r\n  }\r\n  \r\n  /**\r\n   * 检查是否是网络错误\r\n   * @param {Error} error - 错误对象\r\n   * @returns {boolean} 是否是网络错误\r\n   */\r\n  isNetworkError(error) {\r\n    return error.type === ERROR_TYPES.NETWORK_ERROR || \r\n           error.type === ERROR_TYPES.TIMEOUT_ERROR ||\r\n           (error.errMsg && error.errMsg.includes('fail'))\r\n  }\r\n  \r\n  /**\r\n   * 检查是否是认证错误\r\n   * @param {Error} error - 错误对象\r\n   * @returns {boolean} 是否是认证错误\r\n   */\r\n  isAuthError(error) {\r\n    return error.type === ERROR_TYPES.AUTH_ERROR\r\n  }\r\n  \r\n  /**\r\n   * 延迟函数\r\n   * @param {number} ms - 延迟毫秒数\r\n   * @returns {Promise<void>}\r\n   */\r\n  delay(ms) {\r\n    return new Promise(resolve => setTimeout(resolve, ms))\r\n  }\r\n}\r\n\r\n// 创建全局请求实例\r\nexport const request = new RequestManager()\r\n\r\n// 导出便捷方法\r\nexport const get = (url, params, options) => request.get(url, params, options)\r\nexport const post = (url, data, options) => request.post(url, data, options)\r\nexport const put = (url, data, options) => request.put(url, data, options)\r\nexport const del = (url, options) => request.delete(url, options)\r\nexport const upload = (url, filePath, formData, options) => request.upload(url, filePath, formData, options)\r\n\r\n// 默认导出\r\nexport default request\r\n"],"names":["uni","HTTP_STATUS","ERROR_TYPES","API_CONFIG","TokenManager","API_ENDPOINTS","LoginStateManager"],"mappings":"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"}