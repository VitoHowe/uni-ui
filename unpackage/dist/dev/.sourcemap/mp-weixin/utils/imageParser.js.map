{"version":3,"file":"imageParser.js","sources":["utils/imageParser.js"],"sourcesContent":["/**\r\n * 图片解析工具\r\n * 用于处理题目中的图片占位符 ${images/xxx.jpg}\r\n */\r\n\r\n/**\r\n * 解析题目中的图片占位符，转换为HTML标签\r\n * @param {string} text - 原始文本内容\r\n * @param {number} bankId - 题库ID\r\n * @param {string} baseUrl - API基础URL（不包含/api）\r\n * @returns {string} 包含HTML标签的富文本\r\n */\r\nexport function parseQuestionImages(text, bankId, baseUrl = 'http://localhost:3001') {\r\n  if (!text) return ''\r\n  \r\n  let parsedText = text\r\n  \r\n  // 1. 替换图片占位符为 <img> 标签\r\n  parsedText = parsedText.replace(\r\n    /\\$\\{images\\/([^}]+)\\}/g,\r\n    (match, filename) => {\r\n      const imageUrl = `${baseUrl}/api/question-banks/${bankId}/images/${filename}`\r\n      return `<img src=\"${imageUrl}\" class=\"question-image\" style=\"max-width:100%;border-radius:12rpx;margin:20rpx 0;box-shadow:0 4rpx 12rpx rgba(0,0,0,0.08);display:block;background:#f5f7fa;\" />`\r\n    }\r\n  )\r\n  \r\n  // 2. 处理换行符，转换为 <br/>\r\n  parsedText = parsedText.replace(/\\n\\n/g, '<br/><br/>')\r\n  parsedText = parsedText.replace(/\\n/g, '<br/>')\r\n  \r\n  return parsedText\r\n}\r\n\r\n/**\r\n * 提取文本中的所有图片URL（用于图片预览）\r\n * @param {string} text - 原始文本内容\r\n * @param {number} bankId - 题库ID\r\n * @param {string} baseUrl - API基础URL（不包含/api）\r\n * @returns {Array<string>} 图片URL数组\r\n */\r\nexport function extractImageUrls(text, bankId, baseUrl = 'http://localhost:3001') {\r\n  if (!text) return []\r\n  \r\n  const urls = []\r\n  const regex = /\\$\\{images\\/([^}]+)\\}/g\r\n  let match\r\n  \r\n  while ((match = regex.exec(text)) !== null) {\r\n    const filename = match[1]\r\n    urls.push(`${baseUrl}/api/question-banks/${bankId}/images/${filename}`)\r\n  }\r\n  \r\n  return urls\r\n}\r\n\r\n/**\r\n * 从多个文本字段中提取所有图片URL\r\n * @param {Object} question - 题目对象\r\n * @param {number} bankId - 题库ID\r\n * @param {string} baseUrl - API基础URL\r\n * @returns {Array<string>} 所有图片URL数组\r\n */\r\nexport function extractAllQuestionImages(question, bankId, baseUrl = 'http://localhost:3001') {\r\n  if (!question) return []\r\n  \r\n  const urls = []\r\n  \r\n  // 从题目内容中提取\r\n  if (question.content) {\r\n    urls.push(...extractImageUrls(question.content, bankId, baseUrl))\r\n  }\r\n  \r\n  // 从解析说明中提取\r\n  if (question.explanation) {\r\n    urls.push(...extractImageUrls(question.explanation, bankId, baseUrl))\r\n  }\r\n  \r\n  return urls\r\n}\r\n"],"names":[],"mappings":";AAYO,SAAS,oBAAoB,MAAM,QAAQ,UAAU,yBAAyB;AACnF,MAAI,CAAC;AAAM,WAAO;AAElB,MAAI,aAAa;AAGjB,eAAa,WAAW;AAAA,IACtB;AAAA,IACA,CAAC,OAAO,aAAa;AACnB,YAAM,WAAW,GAAG,OAAO,uBAAuB,MAAM,WAAW,QAAQ;AAC3E,aAAO,aAAa,QAAQ;AAAA,IAC7B;AAAA,EACF;AAGD,eAAa,WAAW,QAAQ,SAAS,YAAY;AACrD,eAAa,WAAW,QAAQ,OAAO,OAAO;AAE9C,SAAO;AACT;AASO,SAAS,iBAAiB,MAAM,QAAQ,UAAU,yBAAyB;AAChF,MAAI,CAAC;AAAM,WAAO,CAAE;AAEpB,QAAM,OAAO,CAAE;AACf,QAAM,QAAQ;AACd,MAAI;AAEJ,UAAQ,QAAQ,MAAM,KAAK,IAAI,OAAO,MAAM;AAC1C,UAAM,WAAW,MAAM,CAAC;AACxB,SAAK,KAAK,GAAG,OAAO,uBAAuB,MAAM,WAAW,QAAQ,EAAE;AAAA,EACvE;AAED,SAAO;AACT;AASO,SAAS,yBAAyB,UAAU,QAAQ,UAAU,yBAAyB;AAC5F,MAAI,CAAC;AAAU,WAAO,CAAE;AAExB,QAAM,OAAO,CAAE;AAGf,MAAI,SAAS,SAAS;AACpB,SAAK,KAAK,GAAG,iBAAiB,SAAS,SAAS,QAAQ,OAAO,CAAC;AAAA,EACjE;AAGD,MAAI,SAAS,aAAa;AACxB,SAAK,KAAK,GAAG,iBAAiB,SAAS,aAAa,QAAQ,OAAO,CAAC;AAAA,EACrE;AAED,SAAO;AACT;;;"}