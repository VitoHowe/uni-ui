{"version":3,"file":"auth.js","sources":["utils/auth.js"],"sourcesContent":["import { STORAGE_KEYS, API_CONFIG } from './constants.js'\r\n\r\n/**\r\n * Token管理工具类\r\n */\r\nexport class TokenManager {\r\n  /**\r\n   * 设置Token信息\r\n   * @param {Object} tokenData - Token数据 \r\n   * @param {string} tokenData.accessToken - 访问令牌\r\n   * @param {string} tokenData.refreshToken - 刷新令牌\r\n   * @param {string} tokenData.expiresIn - 过期时间（如\"2h\"）\r\n   */\r\n  static setTokens(tokenData) {\r\n    const { accessToken, refreshToken, expiresIn } = tokenData\r\n    \r\n    // 计算过期时间戳\r\n    const expiresAt = Date.now() + this.parseExpiresIn(expiresIn)\r\n    \r\n    // 存储到内存（Pinia store会处理）\r\n    uni.setStorageSync(STORAGE_KEYS.ACCESS_TOKEN, accessToken)\r\n    uni.setStorageSync(STORAGE_KEYS.REFRESH_TOKEN, refreshToken)\r\n    uni.setStorageSync(STORAGE_KEYS.TOKEN_EXPIRES_AT, expiresAt)\r\n    \r\n    console.log('🔑 Token已更新', { expiresAt: new Date(expiresAt) })\r\n  }\r\n  \r\n  /**\r\n   * 获取访问令牌\r\n   * @returns {string|null} 访问令牌\r\n   */\r\n  static getAccessToken() {\r\n    return uni.getStorageSync(STORAGE_KEYS.ACCESS_TOKEN) || null\r\n  }\r\n  \r\n  /**\r\n   * 获取刷新令牌\r\n   * @returns {string|null} 刷新令牌\r\n   */\r\n  static getRefreshToken() {\r\n    return uni.getStorageSync(STORAGE_KEYS.REFRESH_TOKEN) || null\r\n  }\r\n  \r\n  /**\r\n   * 检查Token是否即将过期\r\n   * @returns {boolean} 是否需要刷新\r\n   */\r\n  static shouldRefreshToken() {\r\n    const expiresAt = uni.getStorageSync(STORAGE_KEYS.TOKEN_EXPIRES_AT)\r\n    if (!expiresAt) return false\r\n    \r\n    const now = Date.now()\r\n    const timeLeft = expiresAt - now\r\n    \r\n    // 提前5分钟刷新\r\n    return timeLeft <= API_CONFIG.TOKEN_REFRESH_THRESHOLD\r\n  }\r\n  \r\n  /**\r\n   * 检查Token是否已过期\r\n   * @returns {boolean} 是否已过期\r\n   */\r\n  static isTokenExpired() {\r\n    const expiresAt = uni.getStorageSync(STORAGE_KEYS.TOKEN_EXPIRES_AT)\r\n    if (!expiresAt) return true\r\n    \r\n    return Date.now() >= expiresAt\r\n  }\r\n  \r\n  /**\r\n   * 清除所有Token\r\n   */\r\n  static clearTokens() {\r\n    uni.removeStorageSync(STORAGE_KEYS.ACCESS_TOKEN)\r\n    uni.removeStorageSync(STORAGE_KEYS.REFRESH_TOKEN)\r\n    uni.removeStorageSync(STORAGE_KEYS.TOKEN_EXPIRES_AT)\r\n    console.log('🗑️ Token已清除')\r\n  }\r\n  \r\n  /**\r\n   * 解析过期时间字符串为毫秒数\r\n   * @param {string} expiresIn - 过期时间字符串（如\"2h\", \"7d\"）\r\n   * @returns {number} 毫秒数\r\n   */\r\n  static parseExpiresIn(expiresIn) {\r\n    const unit = expiresIn.slice(-1)\r\n    const value = parseInt(expiresIn.slice(0, -1))\r\n    \r\n    switch (unit) {\r\n      case 's': return value * 1000\r\n      case 'm': return value * 60 * 1000\r\n      case 'h': return value * 60 * 60 * 1000\r\n      case 'd': return value * 24 * 60 * 60 * 1000\r\n      default: return 2 * 60 * 60 * 1000 // 默认2小时\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * 用户信息管理工具\r\n */\r\nexport class UserManager {\r\n  /**\r\n   * 保存用户信息\r\n   * @param {Object} userInfo - 用户信息\r\n   */\r\n  static setUserInfo(userInfo) {\r\n    uni.setStorageSync(STORAGE_KEYS.USER_INFO, userInfo)\r\n    console.log('👤 用户信息已更新', userInfo)\r\n  }\r\n  \r\n  /**\r\n   * 获取用户信息\r\n   * @returns {Object|null} 用户信息\r\n   */\r\n  static getUserInfo() {\r\n    return uni.getStorageSync(STORAGE_KEYS.USER_INFO) || null\r\n  }\r\n  \r\n  /**\r\n   * 清除用户信息\r\n   */\r\n  static clearUserInfo() {\r\n    uni.removeStorageSync(STORAGE_KEYS.USER_INFO)\r\n    console.log('🗑️ 用户信息已清除')\r\n  }\r\n  \r\n  /**\r\n   * 检查是否是管理员\r\n   * @returns {boolean} 是否是管理员\r\n   */\r\n  static isAdmin() {\r\n    const userInfo = this.getUserInfo()\r\n    return userInfo && userInfo.role_id === 1\r\n  }\r\n  \r\n  /**\r\n   * 检查用户状态是否正常\r\n   * @returns {boolean} 用户状态是否正常\r\n   */\r\n  static isUserActive() {\r\n    const userInfo = this.getUserInfo()\r\n    return userInfo && userInfo.status === 1\r\n  }\r\n}\r\n\r\n/**\r\n * 微信登录工具\r\n */\r\nexport class WechatAuth {\r\n  // 内部变量：记录最后一次获取的code，避免重复使用\r\n  static _lastCode = null\r\n  static _codeTimestamp = 0\r\n  \r\n  /**\r\n   * 获取微信登录Code\r\n   * @param {boolean} forceRefresh - 强制刷新code，即使刚刚获取过\r\n   * @returns {Promise<string>} 微信登录Code\r\n   */\r\n  static getWechatCode(forceRefresh = false) {\r\n    return new Promise((resolve, reject) => {\r\n      const now = Date.now()\r\n      \r\n      // 如果不强制刷新且距离上次获取code不到2秒，直接拒绝（防止重复获取）\r\n      if (!forceRefresh && this._lastCode && (now - this._codeTimestamp) < 2000) {\r\n        console.warn('⚠️ 获取code过于频繁，请稍后重试')\r\n        reject(new Error('获取授权过于频繁，请稍后重试'))\r\n        return\r\n      }\r\n      \r\n      console.log('🔐 开始获取全新的微信Code...')\r\n      \r\n      uni.login({\r\n        provider: 'weixin',\r\n        onlyAuthorize: true,\r\n        success: (res) => {\r\n          console.log('🔐 获取成功', res)\r\n          if (!res.code) {\r\n            console.error('❌ 微信返回的code为空')\r\n            reject(new Error('微信授权失败，请重试'))\r\n            return\r\n          }\r\n          \r\n          // 检查是否与上次code相同（不应该发生，但增加保护）\r\n          if (!forceRefresh && res.code === this._lastCode) {\r\n            console.warn('⚠️ 获取到重复的微信code，强制重新获取')\r\n            // 递归调用，强制刷新\r\n            setTimeout(() => {\r\n              this.getWechatCode(true).then(resolve).catch(reject)\r\n            }, 500)\r\n            return\r\n          }\r\n          \r\n          // 记录新的code和时间戳\r\n          this._lastCode = res.code\r\n          this._codeTimestamp = now\r\n          \r\n          console.log('✅ 获取微信Code成功', {\r\n            code: res.code.substring(0, 8) + '...',\r\n            timestamp: new Date(now).toLocaleTimeString()\r\n          })\r\n          \r\n          resolve(res.code)\r\n        },\r\n        fail: (err) => {\r\n          console.error('❌ 获取微信Code失败', err)\r\n          reject(new Error(err.errMsg || '获取微信授权失败，请重试'))\r\n        }\r\n      })\r\n    })\r\n  }\r\n  \r\n  /**\r\n   * 清除缓存的code信息（在登录失败时调用）\r\n   */\r\n  static clearCodeCache() {\r\n    console.log('🗑️ 清除微信code缓存')\r\n    this._lastCode = null\r\n    this._codeTimestamp = 0\r\n  }\r\n  \r\n  /**\r\n   * 获取用户信息（需要用户授权）\r\n   * @returns {Promise<Object>} 用户信息\r\n   */\r\n  static getUserProfile() {\r\n    return new Promise((resolve, reject) => {\r\n      // #ifdef MP-WEIXIN\r\n      uni.getUserProfile({\r\n        desc: '用于完善个人资料',\r\n        success: (res) => {\r\n          console.log('👤 获取用户信息成功', res.userInfo)\r\n          resolve({\r\n            encryptedData: res.encryptedData,\r\n            iv: res.iv,\r\n            signature: res.signature,\r\n            userInfo: res.userInfo\r\n          })\r\n        },\r\n        fail: (err) => {\r\n          console.error('❌ 用户取消授权', err)\r\n          reject(new Error('需要授权才能使用完整功能'))\r\n        }\r\n      })\r\n      // #endif\r\n      \r\n      // #ifndef MP-WEIXIN\r\n      // 非微信小程序环境，返回模拟数据\r\n      resolve({\r\n        userInfo: {\r\n          nickName: '测试用户',\r\n          avatarUrl: '/static/avatar.png'\r\n        }\r\n      })\r\n      // #endif\r\n    })\r\n  }\r\n  \r\n  /**\r\n   * 检查是否支持微信登录\r\n   * @returns {boolean} 是否支持\r\n   */\r\n  static isWechatLoginSupported() {\r\n    // #ifdef MP-WEIXIN\r\n    return true\r\n    // #endif\r\n    \r\n    // #ifndef MP-WEIXIN\r\n    return false\r\n    // #endif\r\n  }\r\n}\r\n\r\n/**\r\n * 登录状态管理\r\n */\r\nexport class LoginStateManager {\r\n  /**\r\n   * 设置登录状态\r\n   * @param {boolean} isLoggedIn - 是否已登录\r\n   */\r\n  static setLoginState(isLoggedIn) {\r\n    uni.setStorageSync(STORAGE_KEYS.LOGIN_STATE, isLoggedIn)\r\n  }\r\n  \r\n  /**\r\n   * 获取登录状态\r\n   * @returns {boolean} 是否已登录\r\n   */\r\n  static getLoginState() {\r\n    return uni.getStorageSync(STORAGE_KEYS.LOGIN_STATE) || false\r\n  }\r\n  \r\n  /**\r\n   * 清除登录状态\r\n   */\r\n  static clearLoginState() {\r\n    uni.removeStorageSync(STORAGE_KEYS.LOGIN_STATE)\r\n  }\r\n  \r\n  /**\r\n   * 完整的登出处理\r\n   */\r\n  static logout() {\r\n    TokenManager.clearTokens()\r\n    UserManager.clearUserInfo()\r\n    this.clearLoginState()\r\n    console.log('🚪 用户已登出')\r\n  }\r\n}\r\n\r\n/**\r\n * 路由守卫工具\r\n */\r\nexport class RouteGuard {\r\n  // 不需要登录就能访问的页面列表（公开页面）\r\n  // 默认情况下，除了这些页面，所有其他页面都需要登录\r\n  static PUBLIC_ROUTES = [\r\n    '/pages/login/login'\r\n  ]\r\n  \r\n  /**\r\n   * 检查页面是否需要登录权限\r\n   * @param {string} path - 页面路径\r\n   * @returns {boolean} 是否需要登录\r\n   */\r\n  static isProtectedRoute(path) {\r\n    // 默认所有页面都需要登录，除非在公开页面列表中\r\n    return !this.isPublicRoute(path)\r\n  }\r\n  \r\n  /**\r\n   * 检查页面是否为公开页面\r\n   * @param {string} path - 页面路径\r\n   * @returns {boolean} 是否为公开页面\r\n   */\r\n  static isPublicRoute(path) {\r\n    return this.PUBLIC_ROUTES.some(route => path.startsWith(route))\r\n  }\r\n  \r\n  /**\r\n   * 保存当前路径（用于登录后跳转）\r\n   * @param {string} path - 页面路径\r\n   */\r\n  static saveReturnPath(path) {\r\n    uni.setStorageSync('return_path', path)\r\n  }\r\n  \r\n  /**\r\n   * 获取并清除返回路径\r\n   * @returns {string} 返回路径\r\n   */\r\n  static getAndClearReturnPath() {\r\n    const path = uni.getStorageSync('return_path') || '/pages/index/index'\r\n    uni.removeStorageSync('return_path')\r\n    return path\r\n  }\r\n}\r\n\r\n/**\r\n * 权限检查工具\r\n */\r\nexport class PermissionChecker {\r\n  /**\r\n   * 检查是否有访问权限\r\n   * @param {string} permission - 权限标识\r\n   * @returns {boolean} 是否有权限\r\n   */\r\n  static hasPermission(permission) {\r\n    const userInfo = UserManager.getUserInfo()\r\n    if (!userInfo) return false\r\n    \r\n    // 管理员拥有所有权限\r\n    if (userInfo.role_id === 1) return true\r\n    \r\n    // 根据具体业务需求实现权限检查逻辑\r\n    switch (permission) {\r\n      case 'file_upload':\r\n        return LoginStateManager.getLoginState()\r\n      case 'user_management':\r\n        return userInfo.role_id === 1\r\n      default:\r\n        return true\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 检查功能是否可用\r\n   * @param {string} feature - 功能标识\r\n   * @returns {Object} 检查结果 {available: boolean, message: string}\r\n   */\r\n  static checkFeatureAvailable(feature) {\r\n    const isLoggedIn = LoginStateManager.getLoginState()\r\n    const userInfo = UserManager.getUserInfo()\r\n    \r\n    switch (feature) {\r\n      case 'file_upload':\r\n        if (!isLoggedIn) {\r\n          return {\r\n            available: false,\r\n            message: '请先登录后再使用文件上传功能'\r\n          }\r\n        }\r\n        return { available: true, message: '' }\r\n        \r\n      case 'profile_management':\r\n        if (!isLoggedIn) {\r\n          return {\r\n            available: false,\r\n            message: '请先登录后再查看个人资料'\r\n          }\r\n        }\r\n        return { available: true, message: '' }\r\n        \r\n      case 'admin_functions':\r\n        if (!userInfo || userInfo.role_id !== 1) {\r\n          return {\r\n            available: false,\r\n            message: '仅管理员可使用此功能'\r\n          }\r\n        }\r\n        return { available: true, message: '' }\r\n        \r\n      default:\r\n        return { available: true, message: '' }\r\n    }\r\n  }\r\n}\r\n"],"names":["uni","STORAGE_KEYS","API_CONFIG"],"mappings":"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"}