{"version":3,"file":"exam.js","sources":["pages/exam/exam.vue","../../../HBuilderX/plugins/uniapp-cli-vite/uniPage:/cGFnZXMvZXhhbS9leGFtLnZ1ZQ"],"sourcesContent":["<template>\r\n  <view class=\"exam-container\">\r\n    <!-- 顶部进度栏 -->\r\n    <view class=\"exam-header\">\r\n      <view class=\"header-info\">\r\n        <view class=\"back-btn\" @click=\"handleBack\">\r\n          <uni-icons type=\"back\" size=\"20\" color=\"#333\" />\r\n        </view>\r\n        <view class=\"exam-title\">\r\n          <text class=\"title-text\">{{ titleText }}</text>\r\n          <text class=\"subtitle-text\">{{ subtitleText }}</text>\r\n        </view>\r\n        <view class=\"stats-btn\" @click=\"showStats\">\r\n          <uni-icons type=\"bars\" size=\"20\" color=\"#333\" />\r\n        </view>\r\n      </view>\r\n      <view class=\"progress-container\">\r\n        <view class=\"progress-bar\">\r\n          <view class=\"progress-fill\" :style=\"{width: progressPercent + '%'}\"></view>\r\n        </view>\r\n        <text class=\"progress-text\">{{ progressPercent }}%</text>\r\n      </view>\r\n    </view>\r\n\r\n    <!-- 加载状态 -->\r\n    <view v-if=\"loading\" class=\"loading-state\">\r\n      <uni-icons type=\"spinner-cycle\" size=\"40\" color=\"#667eea\" class=\"loading-icon\" />\r\n      <text class=\"loading-text\">正在加载题目...</text>\r\n    </view>\r\n\r\n    <!-- 题目内容 -->\r\n    <view v-else-if=\"currentQuestion\" class=\"question-content\">\r\n      <!-- 题目卡片 -->\r\n      <view class=\"question-card\">\r\n        <view class=\"question-header\">\r\n          <view class=\"question-type\" :class=\"'type-' + currentQuestion.type\">\r\n            <text class=\"type-text\">{{ getTypeLabel(currentQuestion.type) }}</text>\r\n          </view>\r\n          <view class=\"question-difficulty\">\r\n            <uni-icons \r\n              v-for=\"i in 3\" \r\n              :key=\"i\"\r\n              type=\"star-filled\" \r\n              :size=\"14\" \r\n              :color=\"i <= currentQuestion.difficulty ? '#ffc107' : '#ddd'\" \r\n            />\r\n          </view>\r\n        </view>\r\n\r\n        <view class=\"question-number\">\r\n          <text>题号 {{ currentQuestionNumber }}</text>\r\n        </view>\r\n\r\n        <view class=\"question-text\" @click=\"handleImageClick\">\r\n          <rich-text :nodes=\"parsedContent\"></rich-text>\r\n        </view>\r\n\r\n        <!-- 标签 -->\r\n        <view v-if=\"currentQuestion.tags && currentQuestion.tags.length > 0\" class=\"question-tags\">\r\n          <view class=\"tag\" v-for=\"(tag, index) in currentQuestion.tags\" :key=\"index\">\r\n            <text class=\"tag-text\">{{ tag }}</text>\r\n          </view>\r\n        </view>\r\n      </view>\r\n\r\n      <!-- 选项列表 -->\r\n      <view class=\"options-list\">\r\n        <view \r\n          v-for=\"(option, index) in currentQuestion.options\" \r\n          :key=\"index\"\r\n          class=\"option-item\"\r\n          :class=\"{\r\n            'selected': isOptionSelected(index),\r\n            'correct': showAnswer && isCorrectOption(index),\r\n            'wrong': showAnswer && isOptionSelected(index) && !isCorrectOption(index),\r\n            'disabled': showAnswer\r\n          }\"\r\n          @click=\"selectOption(index)\"\r\n        >\r\n          <view class=\"option-label\">\r\n            <text class=\"label-text\">{{ getOptionLabel(index) }}</text>\r\n          </view>\r\n          <view class=\"option-content\">\r\n            <text class=\"option-text\">{{ option }}</text>\r\n          </view>\r\n          <view class=\"option-icon\">\r\n            <uni-icons \r\n              v-if=\"showAnswer && isCorrectOption(index)\"\r\n              type=\"checkmarkempty\" \r\n              size=\"20\" \r\n              color=\"#28a745\" \r\n            />\r\n            <uni-icons \r\n              v-else-if=\"showAnswer && isOptionSelected(index) && !isCorrectOption(index)\"\r\n              type=\"closeempty\" \r\n              size=\"20\" \r\n              color=\"#dc3545\" \r\n            />\r\n            <view \r\n              v-else-if=\"isOptionSelected(index)\" \r\n              class=\"selected-dot\"\r\n            ></view>\r\n          </view>\r\n        </view>\r\n      </view>\r\n\r\n      <!-- 答案解析 -->\r\n      <view v-if=\"showAnswer\" class=\"answer-section\">\r\n        <view class=\"answer-header\">\r\n          <uni-icons type=\"info\" size=\"20\" color=\"#667eea\" />\r\n          <text class=\"answer-title\">答案解析</text>\r\n        </view>\r\n        <view class=\"answer-content\">\r\n          <view class=\"answer-row\">\r\n            <text class=\"answer-label\">正确答案：</text>\r\n            <text class=\"answer-value correct\">{{ formatAnswer(currentQuestion.answer) }}</text>\r\n          </view>\r\n          <view class=\"answer-row\">\r\n            <text class=\"answer-label\">你的答案：</text>\r\n            <text class=\"answer-value\" :class=\"isAnswerCorrect ? 'correct' : 'wrong'\">\r\n              {{ userAnswer || '未作答' }}\r\n            </text>\r\n          </view>\r\n          <view class=\"explanation\" @click=\"handleImageClick\">\r\n            <text class=\"explanation-label\">解析：</text>\r\n            <view class=\"explanation-text\">\r\n              <rich-text v-if=\"currentQuestion.explanation\" :nodes=\"parsedExplanation\"></rich-text>\r\n              <text v-else style=\"color:#999;\">暂无解析</text>\r\n            </view>\r\n          </view>\r\n        </view>\r\n      </view>\r\n\r\n      <!-- 操作按钮 -->\r\n      <view class=\"action-buttons\">\r\n        <button \r\n          class=\"action-btn secondary\"\r\n          :disabled=\"!hasPrevQuestion && (practiceMode === 'chapter' || !canSwitchToPrevChapter())\"\r\n          @click=\"prevQuestion\"\r\n        >\r\n          <uni-icons type=\"back\" size=\"16\" color=\"#fff\" />\r\n          <text class=\"btn-text\">上一题</text>\r\n        </button>\r\n\r\n        <button \r\n          v-if=\"!showAnswer\"\r\n          class=\"action-btn primary show-answer\"\r\n          @click=\"toggleAnswer\"\r\n        >\r\n          <uni-icons type=\"eye\" size=\"16\" color=\"#fff\" />\r\n          <text class=\"btn-text\">查看答案</text>\r\n        </button>\r\n        <button \r\n          v-else\r\n          class=\"action-btn primary hide-answer\"\r\n          @click=\"toggleAnswer\"\r\n        >\r\n          <uni-icons type=\"eye-slash\" size=\"16\" color=\"#fff\" />\r\n          <text class=\"btn-text\">收起</text>\r\n        </button>\r\n\r\n        <button \r\n          v-if=\"hasNextQuestion || (practiceMode === 'full' && canSwitchToNextChapter())\"\r\n          class=\"action-btn secondary\"\r\n          @click=\"nextQuestion\"\r\n        >\r\n          <text class=\"btn-text\">下一题</text>\r\n          <uni-icons type=\"forward\" size=\"16\" color=\"#fff\" />\r\n        </button>\r\n        <button \r\n          v-else\r\n          class=\"action-btn finish\"\r\n          @click=\"finishExam\"\r\n        >\r\n          <uni-icons type=\"checkmarkempty\" size=\"16\" color=\"#fff\" />\r\n          <text class=\"btn-text\">完成</text>\r\n        </button>\r\n      </view>\r\n    </view>\r\n\r\n    <!-- 统计弹窗 -->\r\n    <uni-popup ref=\"statsPopup\" type=\"center\">\r\n      <view class=\"stats-popup\">\r\n        <view class=\"popup-header\">\r\n          <text class=\"popup-title\">答题统计</text>\r\n          <view class=\"close-btn\" @click=\"closeStats\">\r\n            <uni-icons type=\"closeempty\" size=\"20\" color=\"#999\" />\r\n          </view>\r\n        </view>\r\n\r\n        <view class=\"stats-content\">\r\n          <view class=\"stat-row\">\r\n            <view class=\"stat-item\">\r\n              <text class=\"stat-number primary\">{{ answeredCount }}</text>\r\n              <text class=\"stat-label\">已答题</text>\r\n            </view>\r\n            <view class=\"stat-item\">\r\n              <text class=\"stat-number success\">{{ correctCount }}</text>\r\n              <text class=\"stat-label\">正确数</text>\r\n            </view>\r\n            <view class=\"stat-item\">\r\n              <text class=\"stat-number danger\">{{ wrongCount }}</text>\r\n              <text class=\"stat-label\">错误数</text>\r\n            </view>\r\n          </view>\r\n\r\n          <view class=\"accuracy-row\">\r\n            <text class=\"accuracy-label\">正确率</text>\r\n            <text class=\"accuracy-value\">{{ accuracy }}%</text>\r\n          </view>\r\n          \r\n          <view class=\"stats-note\">\r\n            <text class=\"note-text\">💡 统计数据基于本次会话答题情况</text>\r\n          </view>\r\n        </view>\r\n\r\n        <view class=\"popup-buttons\">\r\n          <button class=\"popup-btn secondary\" @click=\"resetProgress\">重新练习</button>\r\n          <button class=\"popup-btn primary\" @click=\"closeStats\">继续练习</button>\r\n        </view>\r\n      </view>\r\n    </uni-popup>\r\n  </view>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, computed, onMounted, onUnmounted, watch } from 'vue'\r\nimport { get, post, del } from '@/utils/request.js'\r\nimport { parseQuestionImages, extractAllQuestionImages } from '@/utils/imageParser.js'\r\nimport { API_CONFIG } from '@/utils/constants.js'\r\n\r\n// 页面参数\r\nconst bankId = ref(0)\r\nconst practiceMode = ref('full') // 'chapter' | 'full'\r\nconst startChapterId = ref(null)\r\nconst startQuestionNumber = ref(1)\r\n\r\n// 题库信息\r\nconst bankInfo = ref({\r\n  bank_name: '',\r\n  total_questions: 0\r\n})\r\n\r\n// 章节数据\r\nconst chapters = ref([]) // 所有章节列表\r\nconst currentChapterIndex = ref(0) // 当前章节索引\r\nconst currentChapter = ref(null) // 当前章节对象\r\n\r\n// 当前题目\r\nconst currentQuestionNumber = ref(1) // 当前题号（章节内，从1开始）\r\nconst currentQuestion = ref(null) // 当前题目对象\r\nconst totalInChapter = ref(0) // 当前章节总题数\r\nconst hasNextQuestion = ref(true) // 是否有下一题\r\nconst hasPrevQuestion = ref(true) // 是否有上一题\r\n\r\n// 答题数据\r\nconst userAnswers = ref({}) // {chapterId_questionNumber: answer}\r\nconst showAnswer = ref(false)\r\nconst questionCache = ref({}) // 题目缓存 {chapterId_questionNumber: question}\r\n\r\n// 加载状态\r\nconst loading = ref(false)\r\n\r\n// 弹窗引用\r\nconst statsPopup = ref(null)\r\n\r\n// 答案key格式：chapterId_questionNumber\r\nconst getAnswerKey = () => {\r\n  if (!currentChapter.value) return ''\r\n  return `${currentChapter.value.id}_${currentQuestionNumber.value}`\r\n}\r\n\r\n// 用户当前题目的答案\r\nconst userAnswer = computed(() => userAnswers.value[getAnswerKey()] || '')\r\n\r\n// 标题文本\r\nconst titleText = computed(() => {\r\n  if (practiceMode.value === 'chapter') {\r\n    return currentChapter.value?.chapter_name || bankInfo.value.bank_name\r\n  }\r\n  return bankInfo.value.bank_name\r\n})\r\n\r\n// 副标题文本\r\nconst subtitleText = computed(() => {\r\n  if (practiceMode.value === 'chapter') {\r\n    return `第 ${currentQuestionNumber.value} / ${totalInChapter.value} 题`\r\n  }\r\n  \r\n  // 整卷模式显示总进度\r\n  let position = 0\r\n  chapters.value.forEach((chapter, index) => {\r\n    if (index < currentChapterIndex.value) {\r\n      position += chapter.question_count\r\n    }\r\n  })\r\n  position += currentQuestionNumber.value\r\n  \r\n  const chapterName = currentChapter.value?.chapter_name || ''\r\n  return `第 ${position} / ${bankInfo.value.total_questions} 题 (${chapterName})`\r\n})\r\n\r\n// 进度百分比\r\nconst progressPercent = computed(() => {\r\n  if (practiceMode.value === 'chapter') {\r\n    return totalInChapter.value > 0 ? Math.round((currentQuestionNumber.value / totalInChapter.value) * 100) : 0\r\n  }\r\n  \r\n  // 整卷模式计算整体进度\r\n  let totalQuestions = 0\r\n  let currentPosition = 0\r\n  \r\n  chapters.value.forEach((chapter, index) => {\r\n    totalQuestions += chapter.question_count\r\n    if (index < currentChapterIndex.value) {\r\n      currentPosition += chapter.question_count\r\n    }\r\n  })\r\n  currentPosition += currentQuestionNumber.value\r\n  \r\n  return totalQuestions > 0 ? Math.round((currentPosition / totalQuestions) * 100) : 0\r\n})\r\n\r\n// 已答题数\r\nconst answeredCount = computed(() => Object.keys(userAnswers.value).length)\r\n\r\n// 正确数\r\nconst correctCount = computed(() => {\r\n  return Object.keys(userAnswers.value).filter(key => {\r\n    const userAns = userAnswers.value[key]\r\n    return checkAnswerByKey(key, userAns)\r\n  }).length\r\n})\r\n\r\n// 错误数\r\nconst wrongCount = computed(() => answeredCount.value - correctCount.value)\r\n\r\n// 正确率\r\nconst accuracy = computed(() => {\r\n  if (answeredCount.value === 0) return 0\r\n  return Math.round(correctCount.value / answeredCount.value * 100)\r\n})\r\n\r\n// 当前答案是否正确\r\nconst isAnswerCorrect = computed(() => {\r\n  if (!userAnswer.value) return false\r\n  return userAnswer.value === formatAnswer(currentQuestion.value.answer)\r\n})\r\n\r\n// 解析后的题目内容（包含图片）\r\nconst parsedContent = computed(() => {\r\n  if (!currentQuestion.value || !currentQuestion.value.content) return ''\r\n  const baseUrl = API_CONFIG.BASE_URL.replace('/api', '')\r\n  return parseQuestionImages(currentQuestion.value.content, bankId.value, baseUrl)\r\n})\r\n\r\n// 解析后的答案解析（包含图片）\r\nconst parsedExplanation = computed(() => {\r\n  if (!currentQuestion.value || !currentQuestion.value.explanation) return ''\r\n  const baseUrl = API_CONFIG.BASE_URL.replace('/api', '')\r\n  return parseQuestionImages(currentQuestion.value.explanation, bankId.value, baseUrl)\r\n})\r\n\r\n// 获取当前题目所有图片URL（用于预览）\r\nconst currentImageUrls = computed(() => {\r\n  if (!currentQuestion.value) return []\r\n  const baseUrl = API_CONFIG.BASE_URL.replace('/api', '')\r\n  return extractAllQuestionImages(currentQuestion.value, bankId.value, baseUrl)\r\n})\r\n\r\n// 页面加载\r\nonMounted(async () => {\r\n  // 获取路由参数\r\n  const pages = getCurrentPages()\r\n  const currentPage = pages[pages.length - 1]\r\n  const options = currentPage.options\r\n  \r\n  bankId.value = parseInt(options.bankId) || 0\r\n  practiceMode.value = options.mode || 'full'\r\n  startChapterId.value = parseInt(options.chapterId) || null\r\n  startQuestionNumber.value = parseInt(options.questionNumber) || 1\r\n  \r\n  if (!bankId.value) {\r\n    uni.showToast({ title: '参数错误', icon: 'none' })\r\n    setTimeout(() => {\r\n      uni.navigateBack()\r\n    }, 1500)\r\n    return\r\n  }\r\n  \r\n  await initExam()\r\n  \r\n  // 监听小程序隐藏事件\r\n  uni.onAppHide(() => {\r\n    saveProgress()\r\n  })\r\n})\r\n\r\n// 页面卸载时保存进度\r\nonUnmounted(() => {\r\n  saveProgress()\r\n})\r\n\r\n// 监听题号和章节变化，自动保存进度\r\nwatch([currentQuestionNumber, currentChapterIndex], ([newQuestionNum, newChapterIdx], [oldQuestionNum, oldChapterIdx]) => {\r\n  if ((oldQuestionNum !== undefined && newQuestionNum !== oldQuestionNum) ||\r\n      (oldChapterIdx !== undefined && newChapterIdx !== oldChapterIdx)) {\r\n    saveProgress()\r\n  }\r\n})\r\n\r\n// 初始化考试\r\nconst initExam = async () => {\r\n  loading.value = true\r\n  try {\r\n    console.log('📖 开始初始化考试，参数:', {\r\n      bankId: bankId.value,\r\n      mode: practiceMode.value,\r\n      chapterId: startChapterId.value,\r\n      questionNumber: startQuestionNumber.value\r\n    })\r\n    \r\n    // 1. 获取题库基本信息（使用新的题库管理API）\r\n    const bankData = await get(`/questions/banks/${bankId.value}`, {}, { showLoading: false })\r\n    console.log('✅ 题库信息:', bankData)\r\n    \r\n    bankInfo.value = {\r\n      bank_name: bankData.name || '题库',\r\n      total_questions: bankData.question_count || 0\r\n    }\r\n    \r\n    // 2. 获取章节列表\r\n    const chaptersData = await get(`/question-banks/${bankId.value}/chapters`, {}, { showLoading: false })\r\n    console.log('✅ 章节列表:', chaptersData)\r\n    \r\n    chapters.value = chaptersData.chapters || []\r\n    \r\n    if (chapters.value.length === 0) {\r\n      uni.showToast({ title: '该题库暂无章节', icon: 'none' })\r\n      setTimeout(() => uni.navigateBack(), 1500)\r\n      return\r\n    }\r\n    \r\n    // 3. 确定起始章节\r\n    if (startChapterId.value) {\r\n      const index = chapters.value.findIndex(c => c.id === startChapterId.value)\r\n      currentChapterIndex.value = index >= 0 ? index : 0\r\n      console.log(`📍 找到起始章节，索引: ${currentChapterIndex.value}`)\r\n    } else {\r\n      currentChapterIndex.value = 0\r\n      console.log('📍 使用第一个章节')\r\n    }\r\n    \r\n    currentChapter.value = chapters.value[currentChapterIndex.value]\r\n    currentQuestionNumber.value = startQuestionNumber.value\r\n    \r\n    console.log('📍 当前章节:', currentChapter.value)\r\n    console.log('📍 起始题号:', currentQuestionNumber.value)\r\n    \r\n    // 4. 加载起始题目\r\n    await loadQuestion()\r\n    \r\n    console.log(`✅ 初始化完成，开始${practiceMode.value === 'chapter' ? '章节' : '整卷'}练习`)\r\n    \r\n  } catch (error) {\r\n    console.error('❌ 初始化失败:', error)\r\n    uni.showToast({\r\n      title: error.message || '加载失败',\r\n      icon: 'none'\r\n    })\r\n    setTimeout(() => uni.navigateBack(), 1500)\r\n  } finally {\r\n    loading.value = false\r\n    console.log('✅ 初始化loading状态已重置')\r\n  }\r\n}\r\n\r\n// 加载题目（单题模式）\r\nconst loadQuestion = async () => {\r\n  if (!currentChapter.value) {\r\n    console.error('❌ currentChapter is null')\r\n    return\r\n  }\r\n  \r\n  loading.value = true\r\n  try {\r\n    console.log(`📖 开始加载题目: 题库${bankId.value}, 章节${currentChapter.value.id}, 题号${currentQuestionNumber.value}`)\r\n    \r\n    const response = await get(\r\n      `/question-banks/${bankId.value}/chapters/${currentChapter.value.id}/questions`,\r\n      { questionNumber: currentQuestionNumber.value },\r\n      { showLoading: false } // 使用组件自己的loading状态，不显示系统加载提示\r\n    )\r\n    \r\n    console.log('📡 题目数据响应:', response)\r\n    \r\n    if (response && response.question) {\r\n      currentQuestion.value = response.question\r\n      totalInChapter.value = response.total || 0\r\n      hasNextQuestion.value = response.hasNext || false\r\n      hasPrevQuestion.value = response.hasPrev || false\r\n      \r\n      // 更新题库总题数（整卷模式下累加所有章节题数）\r\n      if (practiceMode.value === 'full' && chapters.value.length > 0) {\r\n        let totalCount = 0\r\n        chapters.value.forEach(chapter => {\r\n          totalCount += chapter.question_count || 0\r\n        })\r\n        if (totalCount > 0) {\r\n          bankInfo.value.total_questions = totalCount\r\n        }\r\n      }\r\n      \r\n      // 缓存题目\r\n      const cacheKey = getAnswerKey()\r\n      questionCache.value[cacheKey] = response.question\r\n      \r\n      // 重置答案显示状态\r\n      showAnswer.value = false\r\n      \r\n      console.log(`✅ 题目加载成功: ${currentChapter.value.chapter_name} 第${currentQuestionNumber.value}题`)\r\n    } else {\r\n      console.warn('⚠️ 响应中没有question字段:', response)\r\n      // 没有更多题目了\r\n      if (practiceMode.value === 'full' && canSwitchToNextChapter()) {\r\n        // 整卷模式，自动切换到下一章节\r\n        await switchToNextChapter()\r\n      } else {\r\n        uni.showToast({ title: '已是最后一题', icon: 'none' })\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.error('❌ 加载题目失败:', error)\r\n    uni.showToast({\r\n      title: error.message || '加载失败',\r\n      icon: 'none'\r\n    })\r\n  } finally {\r\n    loading.value = false\r\n    console.log('✅ loading状态已重置为false')\r\n  }\r\n}\r\n\r\n// 检查是否可以切换到下一章节\r\nconst canSwitchToNextChapter = () => {\r\n  return currentChapterIndex.value < chapters.value.length - 1\r\n}\r\n\r\n// 检查是否可以切换到上一章节\r\nconst canSwitchToPrevChapter = () => {\r\n  return currentChapterIndex.value > 0\r\n}\r\n\r\n// 切换到下一章节\r\nconst switchToNextChapter = async () => {\r\n  if (canSwitchToNextChapter()) {\r\n    currentChapterIndex.value++\r\n    currentChapter.value = chapters.value[currentChapterIndex.value]\r\n    currentQuestionNumber.value = 1\r\n    \r\n    uni.showToast({\r\n      title: `进入${currentChapter.value.chapter_name}`,\r\n      icon: 'none',\r\n      duration: 1500\r\n    })\r\n    \r\n    await loadQuestion()\r\n  }\r\n}\r\n\r\n// 切换到上一章节\r\nconst switchToPrevChapter = async () => {\r\n  if (canSwitchToPrevChapter()) {\r\n    currentChapterIndex.value--\r\n    currentChapter.value = chapters.value[currentChapterIndex.value]\r\n    currentQuestionNumber.value = currentChapter.value.question_count\r\n    \r\n    await loadQuestion()\r\n  }\r\n}\r\n\r\n// 获取题型标签\r\nconst getTypeLabel = (type) => {\r\n  const typeMap = {\r\n    'single': '单选题',\r\n    'multiple': '多选题',\r\n    'judge': '判断题',\r\n    'fill': '填空题'\r\n  }\r\n  return typeMap[type] || '未知题型'\r\n}\r\n\r\n// 获取选项标签\r\nconst getOptionLabel = (index) => {\r\n  return String.fromCharCode(65 + index) // A, B, C, D...\r\n}\r\n\r\n// 格式化答案\r\nconst formatAnswer = (answer) => {\r\n  if (!answer) return ''\r\n  \r\n  // 如果是多选题，答案可能是 \"AB\" 或 [\"A\", \"B\"]\r\n  if (Array.isArray(answer)) {\r\n    return answer.sort().join('')\r\n  }\r\n  \r\n  // 单选题或判断题\r\n  return answer.toString().toUpperCase()\r\n}\r\n\r\n// 判断选项是否被选中\r\nconst isOptionSelected = (optionIndex) => {\r\n  const key = getAnswerKey()\r\n  const answer = userAnswers.value[key]\r\n  if (!answer) return false\r\n  \r\n  const label = getOptionLabel(optionIndex)\r\n  \r\n  if (currentQuestion.value.type === 'multiple') {\r\n    return answer.includes(label)\r\n  }\r\n  \r\n  return answer === label\r\n}\r\n\r\n// 判断选项是否是正确答案\r\nconst isCorrectOption = (optionIndex) => {\r\n  const correctAnswer = formatAnswer(currentQuestion.value.answer)\r\n  const label = getOptionLabel(optionIndex)\r\n  \r\n  if (currentQuestion.value.type === 'multiple') {\r\n    return correctAnswer.includes(label)\r\n  }\r\n  \r\n  return correctAnswer === label\r\n}\r\n\r\n// 选择选项\r\nconst selectOption = (optionIndex) => {\r\n  if (showAnswer.value) return // 已显示答案时不能再选择\r\n  \r\n  const label = getOptionLabel(optionIndex)\r\n  const key = getAnswerKey()\r\n  \r\n  if (currentQuestion.value.type === 'multiple') {\r\n    // 多选题\r\n    let currentAnswer = userAnswers.value[key] || ''\r\n    \r\n    if (currentAnswer.includes(label)) {\r\n      // 取消选择\r\n      currentAnswer = currentAnswer.replace(label, '')\r\n    } else {\r\n      // 添加选择\r\n      currentAnswer += label\r\n    }\r\n    \r\n    // 按字母顺序排序\r\n    currentAnswer = currentAnswer.split('').sort().join('')\r\n    \r\n    userAnswers.value[key] = currentAnswer\r\n  } else {\r\n    // 单选题或判断题\r\n    userAnswers.value[key] = label\r\n  }\r\n  \r\n  // 选择后自动显示答案\r\n  setTimeout(() => {\r\n    showAnswer.value = true\r\n  }, 300)\r\n}\r\n\r\n// 切换答案显示\r\nconst toggleAnswer = () => {\r\n  showAnswer.value = !showAnswer.value\r\n}\r\n\r\n// 上一题\r\nconst prevQuestion = async () => {\r\n  if (hasPrevQuestion.value) {\r\n    // 章节内有上一题\r\n    currentQuestionNumber.value--\r\n    await loadQuestion()\r\n  } else {\r\n    // 章节内没有上一题了\r\n    if (practiceMode.value === 'full' && canSwitchToPrevChapter()) {\r\n      // 整卷模式，可以返回上一章节\r\n      uni.showModal({\r\n        title: '返回上一章节',\r\n        content: '是否返回上一章节的最后一题？',\r\n        success: async (res) => {\r\n          if (res.confirm) {\r\n            await switchToPrevChapter()\r\n          }\r\n        }\r\n      })\r\n    } else {\r\n      uni.showToast({ title: '已是第一题', icon: 'none' })\r\n    }\r\n  }\r\n}\r\n\r\n// 下一题\r\nconst nextQuestion = async () => {\r\n  if (hasNextQuestion.value) {\r\n    // 章节内有下一题\r\n    currentQuestionNumber.value++\r\n    await loadQuestion()\r\n  } else {\r\n    // 章节内没有下一题了\r\n    if (practiceMode.value === 'full' && canSwitchToNextChapter()) {\r\n      // 整卷模式，切换到下一章节\r\n      uni.showModal({\r\n        title: '章节完成',\r\n        content: `「${currentChapter.value.chapter_name}」已完成\\n\\n是否继续下一章节？`,\r\n        confirmText: '继续',\r\n        cancelText: '退出',\r\n        success: async (res) => {\r\n          if (res.confirm) {\r\n            await switchToNextChapter()\r\n          } else {\r\n            handleBack()\r\n          }\r\n        }\r\n      })\r\n    } else {\r\n      // 章节练习模式或已是最后一章\r\n      uni.showToast({ title: '本章节已完成', icon: 'success' })\r\n      finishExam()\r\n    }\r\n  }\r\n}\r\n\r\n// 跳转到指定题目（简化版，仅用于统计弹窗）\r\nconst jumpToQuestion = async (questionNumber) => {\r\n  if (questionNumber >= 1 && questionNumber <= totalInChapter.value) {\r\n    currentQuestionNumber.value = questionNumber\r\n    await loadQuestion()\r\n    closeStats()\r\n  }\r\n}\r\n\r\n// 检查答案是否正确（使用缓存的题目信息）\r\nconst checkAnswerByKey = (answerKey, userAns) => {\r\n  if (!userAns) return false\r\n  \r\n  const cachedQuestion = questionCache.value[answerKey]\r\n  if (!cachedQuestion) return false\r\n  \r\n  const correctAns = formatAnswer(cachedQuestion.answer)\r\n  return userAns === correctAns\r\n}\r\n\r\n// 显示统计\r\nconst showStats = () => {\r\n  statsPopup.value.open()\r\n}\r\n\r\n// 关闭统计\r\nconst closeStats = () => {\r\n  statsPopup.value.close()\r\n}\r\n\r\n// 保存学习进度\r\nconst saveProgress = async () => {\r\n  if (!bankId.value || !currentChapter.value) return\r\n  \r\n  try {\r\n    if (practiceMode.value === 'chapter') {\r\n      // 章节练习：保存到具体章节\r\n      await post(\r\n        `/user-progress/${bankId.value}/chapters/${currentChapter.value.id}`,\r\n        {\r\n          practice_mode: 'chapter',\r\n          current_question_number: currentQuestionNumber.value,\r\n          completed_count: currentQuestionNumber.value,\r\n          total_questions: totalInChapter.value\r\n        },\r\n        { showLoading: false }\r\n      )\r\n      \r\n      console.log('💾 章节进度已保存:', {\r\n        mode: 'chapter',\r\n        chapter: currentChapter.value.chapter_name,\r\n        questionNumber: currentQuestionNumber.value,\r\n        completedCount: currentQuestionNumber.value,\r\n        total: totalInChapter.value\r\n      })\r\n    } else {\r\n      // 整卷练习：保存到chapter_id=0，记录整体进度\r\n      // 计算整体完成的题目数（前面章节的题数 + 当前章节的题号）\r\n      let totalCompleted = currentQuestionNumber.value\r\n      for (let i = 0; i < currentChapterIndex.value; i++) {\r\n        totalCompleted += chapters.value[i].question_count || 0\r\n      }\r\n      \r\n      await post(\r\n        `/user-progress/${bankId.value}/chapters/0`,\r\n        {\r\n          practice_mode: 'full',\r\n          current_chapter_id: currentChapter.value.id,\r\n          current_question_number: currentQuestionNumber.value,\r\n          completed_count: totalCompleted,\r\n          total_questions: bankInfo.value.total_questions\r\n        },\r\n        { showLoading: false }\r\n      )\r\n      \r\n      console.log('💾 整卷进度已保存:', {\r\n        mode: 'full',\r\n        chapter: currentChapter.value.chapter_name,\r\n        chapterQuestionNumber: currentQuestionNumber.value,\r\n        totalCompleted: totalCompleted,\r\n        total: bankInfo.value.total_questions\r\n      })\r\n    }\r\n  } catch (error) {\r\n    console.error('保存进度失败:', error)\r\n  }\r\n}\r\n\r\n// 重置学习进度\r\nconst resetProgress = async () => {\r\n  uni.showModal({\r\n    title: '重新练习',\r\n    content: '确定要清除当前章节进度，重新开始练习吗？',\r\n    confirmText: '确定',\r\n    cancelText: '取消',\r\n    success: async (res) => {\r\n      if (res.confirm) {\r\n        try {\r\n          uni.showLoading({ title: '重置中...' })\r\n          \r\n          // 删除当前章节进度\r\n          if (practiceMode.value === 'chapter') {\r\n            // 章节练习：只删除当前章节\r\n            await del(`/user-progress/${bankId.value}/chapters/${currentChapter.value.id}`)\r\n          } else {\r\n            // 整卷练习：删除所有章节进度\r\n            await del(`/user-progress/${bankId.value}`)\r\n          }\r\n          \r\n          // 重置本地状态\r\n          currentQuestionNumber.value = 1\r\n          userAnswers.value = {}\r\n          showAnswer.value = false\r\n          questionCache.value = {}\r\n          \r\n          // 重新加载第一题\r\n          await loadQuestion()\r\n          \r\n          uni.hideLoading()\r\n          uni.showToast({\r\n            title: '已重新开始',\r\n            icon: 'success'\r\n          })\r\n          \r\n          console.log('🔄 学习进度已重置')\r\n        } catch (error) {\r\n          uni.hideLoading()\r\n          console.error('重置进度失败:', error)\r\n          uni.showToast({\r\n            title: error.message || '重置失败',\r\n            icon: 'none'\r\n          })\r\n        }\r\n      }\r\n    }\r\n  })\r\n}\r\n\r\n// 完成考试\r\nconst finishExam = () => {\r\n  // 保存最终进度\r\n  saveProgress()\r\n  \r\n  const totalQuestions = practiceMode.value === 'chapter' ? totalInChapter.value : bankInfo.value.total_questions\r\n  \r\n  uni.showModal({\r\n    title: '完成练习',\r\n    content: `已完成 ${answeredCount.value}/${totalQuestions} 题\\n正确率：${accuracy.value}%`,\r\n    confirmText: '查看统计',\r\n    cancelText: '返回',\r\n    success: (res) => {\r\n      if (res.confirm) {\r\n        showStats()\r\n      } else {\r\n        uni.navigateBack()\r\n      }\r\n    }\r\n  })\r\n}\r\n\r\n// 返回\r\nconst handleBack = () => {\r\n  uni.showModal({\r\n    title: '确认退出',\r\n    content: '学习进度已自动保存，确定要退出吗？',\r\n    success: async (res) => {\r\n      if (res.confirm) {\r\n        // 退出前保存一次进度\r\n        await saveProgress()\r\n        uni.navigateBack()\r\n      }\r\n    }\r\n  })\r\n}\r\n\r\n// 处理图片点击事件（预览图片）\r\nconst handleImageClick = () => {\r\n  if (currentImageUrls.value.length > 0) {\r\n    uni.previewImage({\r\n      urls: currentImageUrls.value,\r\n      current: 0\r\n    })\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.exam-container {\r\n  min-height: 100vh;\r\n  background: linear-gradient(180deg, #f5f7fa 0%, #ffffff 100%);\r\n  padding-bottom: 40rpx;\r\n}\r\n\r\n/* 顶部进度栏 */\r\n.exam-header {\r\n  background: white;\r\n  padding: 20rpx;\r\n  box-shadow: 0 2rpx 10rpx rgba(0, 0, 0, 0.05);\r\n  position: sticky;\r\n  top: 0;\r\n  z-index: 100;\r\n}\r\n\r\n.header-info {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  margin-bottom: 16rpx;\r\n}\r\n\r\n.back-btn, .stats-btn {\r\n  width: 60rpx;\r\n  height: 60rpx;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  background: #f5f7fa;\r\n  border-radius: 50%;\r\n}\r\n\r\n.exam-title {\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  gap: 4rpx;\r\n}\r\n\r\n.title-text {\r\n  font-size: 30rpx;\r\n  font-weight: 600;\r\n  color: #333;\r\n}\r\n\r\n.subtitle-text {\r\n  font-size: 24rpx;\r\n  color: #999;\r\n}\r\n\r\n.progress-container {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 16rpx;\r\n}\r\n\r\n.progress-bar {\r\n  flex: 1;\r\n  height: 8rpx;\r\n  background: #f0f0f0;\r\n  border-radius: 4rpx;\r\n  overflow: hidden;\r\n}\r\n\r\n.progress-fill {\r\n  height: 100%;\r\n  background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);\r\n  transition: width 0.3s ease;\r\n}\r\n\r\n.progress-text {\r\n  font-size: 24rpx;\r\n  color: #667eea;\r\n  font-weight: 600;\r\n  min-width: 60rpx;\r\n  text-align: right;\r\n}\r\n\r\n/* 加载状态 */\r\n.loading-state {\r\n  padding: 200rpx 0;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  gap: 24rpx;\r\n}\r\n\r\n.loading-icon {\r\n  animation: spin 1s linear infinite;\r\n}\r\n\r\n@keyframes spin {\r\n  from { transform: rotate(0deg); }\r\n  to { transform: rotate(360deg); }\r\n}\r\n\r\n.loading-text {\r\n  font-size: 28rpx;\r\n  color: #999;\r\n}\r\n\r\n/* 题目内容 */\r\n.question-content {\r\n  padding: 16rpx;\r\n  flex: 1;\r\n  overflow-y: auto;\r\n}\r\n\r\n/* 题目卡片 */\r\n.question-card {\r\n  background: white;\r\n  border-radius: 16rpx;\r\n  padding: 24rpx;\r\n  margin-bottom: 16rpx;\r\n  box-shadow: 0 2rpx 12rpx rgba(0, 0, 0, 0.04);\r\n}\r\n\r\n.question-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 20rpx;\r\n}\r\n\r\n.question-type {\r\n  padding: 8rpx 20rpx;\r\n  border-radius: 20rpx;\r\n  background: #e3f2fd;\r\n}\r\n\r\n.type-single {\r\n  background: #e3f2fd;\r\n}\r\n\r\n.type-multiple {\r\n  background: #fff3e0;\r\n}\r\n\r\n.type-judge {\r\n  background: #e8f5e9;\r\n}\r\n\r\n.type-fill {\r\n  background: #fce4ec;\r\n}\r\n\r\n.type-text {\r\n  font-size: 24rpx;\r\n  color: #666;\r\n}\r\n\r\n.question-difficulty {\r\n  display: flex;\r\n  gap: 4rpx;\r\n}\r\n\r\n.question-number {\r\n  margin-bottom: 16rpx;\r\n}\r\n\r\n.question-number text {\r\n  font-size: 26rpx;\r\n  color: #999;\r\n}\r\n\r\n.question-text {\r\n  font-size: 30rpx;\r\n  line-height: 1.7;\r\n  color: #333;\r\n  margin-bottom: 16rpx;\r\n  font-weight: 500;\r\n}\r\n\r\n/* 题目内容中的图片样式 */\r\n.question-text ::v-deep img,\r\n.question-text ::v-deep image {\r\n  max-width: 100% !important;\r\n  width: 100% !important;\r\n  height: auto !important;\r\n  border-radius: 12rpx;\r\n  margin: 24rpx 0;\r\n  box-shadow: 0 4rpx 16rpx rgba(0, 0, 0, 0.1);\r\n  display: block;\r\n  background: #f5f7fa;\r\n  border: 2rpx solid #e8eaed;\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.question-text ::v-deep img:active,\r\n.question-text ::v-deep image:active {\r\n  transform: scale(0.98);\r\n  box-shadow: 0 2rpx 8rpx rgba(0, 0, 0, 0.08);\r\n}\r\n\r\n.question-tags {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 12rpx;\r\n}\r\n\r\n.tag {\r\n  padding: 6rpx 16rpx;\r\n  background: #f5f7fa;\r\n  border-radius: 8rpx;\r\n}\r\n\r\n.tag-text {\r\n  font-size: 22rpx;\r\n  color: #666;\r\n}\r\n\r\n/* 选项列表 */\r\n.options-list {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 12rpx;\r\n  margin-bottom: 16rpx;\r\n}\r\n\r\n.option-item {\r\n  background: white;\r\n  border: 2rpx solid #e0e0e0;\r\n  border-radius: 12rpx;\r\n  padding: 18rpx 20rpx;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 16rpx;\r\n  transition: all 0.2s ease;\r\n}\r\n\r\n.option-item.selected {\r\n  border-color: #667eea;\r\n  background: #f5f7ff;\r\n}\r\n\r\n.option-item.correct {\r\n  border-color: #28a745;\r\n  background: #f1f9f3;\r\n}\r\n\r\n.option-item.wrong {\r\n  border-color: #dc3545;\r\n  background: #fff5f5;\r\n}\r\n\r\n.option-item.disabled {\r\n  pointer-events: none;\r\n}\r\n\r\n.option-label {\r\n  width: 48rpx;\r\n  height: 48rpx;\r\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n  border-radius: 50%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  flex-shrink: 0;\r\n}\r\n\r\n.option-item.correct .option-label {\r\n  background: linear-gradient(135deg, #28a745 0%, #20c997 100%);\r\n}\r\n\r\n.option-item.wrong .option-label {\r\n  background: linear-gradient(135deg, #dc3545 0%, #e83e8c 100%);\r\n}\r\n\r\n.label-text {\r\n  font-size: 26rpx;\r\n  font-weight: 600;\r\n  color: white;\r\n}\r\n\r\n.option-content {\r\n  flex: 1;\r\n}\r\n\r\n.option-text {\r\n  font-size: 27rpx;\r\n  line-height: 1.6;\r\n  color: #333;\r\n}\r\n\r\n.option-icon {\r\n  flex-shrink: 0;\r\n}\r\n\r\n.selected-dot {\r\n  width: 16rpx;\r\n  height: 16rpx;\r\n  background: #667eea;\r\n  border-radius: 50%;\r\n}\r\n\r\n/* 答案解析 */\r\n.answer-section {\r\n  background: white;\r\n  border-radius: 16rpx;\r\n  padding: 24rpx;\r\n  margin-bottom: 16rpx;\r\n  box-shadow: 0 2rpx 12rpx rgba(0, 0, 0, 0.04);\r\n}\r\n\r\n.answer-header {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 10rpx;\r\n  margin-bottom: 20rpx;\r\n  padding-bottom: 16rpx;\r\n  border-bottom: 1rpx solid #f0f0f0;\r\n}\r\n\r\n.answer-title {\r\n  font-size: 28rpx;\r\n  font-weight: 600;\r\n  color: #333;\r\n}\r\n\r\n.answer-content {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 16rpx;\r\n}\r\n\r\n.answer-row {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.answer-label {\r\n  font-size: 26rpx;\r\n  color: #666;\r\n  min-width: 150rpx;\r\n}\r\n\r\n.answer-value {\r\n  font-size: 26rpx;\r\n  font-weight: 600;\r\n}\r\n\r\n.answer-value.correct {\r\n  color: #28a745;\r\n}\r\n\r\n.answer-value.wrong {\r\n  color: #dc3545;\r\n}\r\n\r\n.explanation {\r\n  background: #f5f7fa;\r\n  padding: 20rpx;\r\n  border-radius: 10rpx;\r\n  margin-top: 6rpx;\r\n}\r\n\r\n.explanation-label {\r\n  font-size: 26rpx;\r\n  font-weight: 600;\r\n  color: #333;\r\n  display: block;\r\n  margin-bottom: 10rpx;\r\n}\r\n\r\n.explanation-text {\r\n  font-size: 25rpx;\r\n  line-height: 1.7;\r\n  color: #666;\r\n}\r\n\r\n/* 解析内容中的图片样式 */\r\n.explanation ::v-deep img,\r\n.explanation ::v-deep image {\r\n  max-width: 100% !important;\r\n  width: 100% !important;\r\n  height: auto !important;\r\n  border-radius: 10rpx;\r\n  margin: 16rpx 0;\r\n  box-shadow: 0 2rpx 10rpx rgba(0, 0, 0, 0.08);\r\n  display: block;\r\n  background: #fafafa;\r\n  border: 1rpx solid #e0e0e0;\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.explanation ::v-deep img:active,\r\n.explanation ::v-deep image:active {\r\n  transform: scale(0.98);\r\n  box-shadow: 0 1rpx 6rpx rgba(0, 0, 0, 0.06);\r\n}\r\n\r\n/* 操作按钮 */\r\n.action-buttons {\r\n  display: flex;\r\n  gap: 12rpx;\r\n  padding: 0 20rpx 20rpx;\r\n  margin-top: 24rpx;\r\n}\r\n\r\n.action-btn {\r\n  flex: 1;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  gap: 6rpx;\r\n  padding: 20rpx 16rpx;\r\n  border-radius: 12rpx;\r\n  font-size: 26rpx;\r\n  font-weight: 500;\r\n  border: none;\r\n  transition: all 0.2s ease;\r\n  box-shadow: 0 2rpx 8rpx rgba(0, 0, 0, 0.08);\r\n}\r\n\r\n.action-btn.secondary {\r\n  background: #6c757d;\r\n  color: white;\r\n}\r\n\r\n.action-btn.secondary:disabled {\r\n  background: #e0e0e0;\r\n  color: #999;\r\n}\r\n\r\n.action-btn.primary {\r\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n  color: white;\r\n}\r\n\r\n.action-btn.finish {\r\n  background: linear-gradient(135deg, #28a745 0%, #20c997 100%);\r\n  color: white;\r\n}\r\n\r\n.action-btn .btn-text {\r\n  font-size: 26rpx;\r\n}\r\n\r\n/* 统计弹窗 */\r\n.stats-popup {\r\n  width: 640rpx;\r\n  background: white;\r\n  border-radius: 24rpx;\r\n  padding: 32rpx;\r\n}\r\n\r\n.popup-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 32rpx;\r\n}\r\n\r\n.popup-title {\r\n  font-size: 32rpx;\r\n  font-weight: 600;\r\n  color: #333;\r\n}\r\n\r\n.close-btn {\r\n  width: 48rpx;\r\n  height: 48rpx;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n\r\n.stats-content {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 32rpx;\r\n}\r\n\r\n.stat-row {\r\n  display: flex;\r\n  justify-content: space-around;\r\n}\r\n\r\n.stat-item {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  gap: 8rpx;\r\n}\r\n\r\n.stat-number {\r\n  font-size: 48rpx;\r\n  font-weight: bold;\r\n}\r\n\r\n.stat-number.primary {\r\n  color: #667eea;\r\n}\r\n\r\n.stat-number.success {\r\n  color: #28a745;\r\n}\r\n\r\n.stat-number.danger {\r\n  color: #dc3545;\r\n}\r\n\r\n.stat-label {\r\n  font-size: 24rpx;\r\n  color: #999;\r\n}\r\n\r\n.accuracy-row {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 24rpx;\r\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n  border-radius: 16rpx;\r\n}\r\n\r\n.accuracy-label {\r\n  font-size: 28rpx;\r\n  color: white;\r\n}\r\n\r\n.accuracy-value {\r\n  font-size: 40rpx;\r\n  font-weight: bold;\r\n  color: white;\r\n}\r\n\r\n.stats-note {\r\n  padding: 20rpx;\r\n  background: #f5f7fa;\r\n  border-radius: 12rpx;\r\n  text-align: center;\r\n}\r\n\r\n.note-text {\r\n  font-size: 24rpx;\r\n  color: #666;\r\n}\r\n\r\n.question-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(8, 1fr);\r\n  gap: 16rpx;\r\n}\r\n\r\n.grid-item {\r\n  aspect-ratio: 1;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  background: #f5f7fa;\r\n  border-radius: 8rpx;\r\n  border: 2rpx solid transparent;\r\n}\r\n\r\n.grid-item.current {\r\n  border-color: #667eea;\r\n  background: #e3f2fd;\r\n}\r\n\r\n.grid-item.answered {\r\n  background: #e0e0e0;\r\n}\r\n\r\n.grid-item.correct {\r\n  background: #d4edda;\r\n  color: #28a745;\r\n}\r\n\r\n.grid-item.wrong {\r\n  background: #f8d7da;\r\n  color: #dc3545;\r\n}\r\n\r\n.grid-number {\r\n  font-size: 24rpx;\r\n  font-weight: 600;\r\n}\r\n\r\n.popup-buttons {\r\n  display: flex;\r\n  gap: 16rpx;\r\n  margin-top: 16rpx;\r\n}\r\n\r\n.popup-btn {\r\n  flex: 1;\r\n  border: none;\r\n  padding: 28rpx;\r\n  border-radius: 16rpx;\r\n  font-size: 30rpx;\r\n  font-weight: 600;\r\n}\r\n\r\n.popup-btn.primary {\r\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n  color: white;\r\n}\r\n\r\n.popup-btn.secondary {\r\n  background: #f5f7fa;\r\n  color: #333;\r\n}\r\n</style>\r\n\r\n","import MiniProgramPage from 'E:/personal/wx/uni-ui/pages/exam/exam.vue'\nwx.createPage(MiniProgramPage)"],"names":["ref","computed","API_CONFIG","parseQuestionImages","extractAllQuestionImages","onMounted","uni","onUnmounted","watch","get","post","del"],"mappings":"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"}