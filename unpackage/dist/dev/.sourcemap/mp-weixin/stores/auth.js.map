{"version":3,"file":"auth.js","sources":["stores/auth.js"],"sourcesContent":["import { defineStore } from 'pinia'\r\nimport { request } from '@/utils/request.js'\r\nimport { API_ENDPOINTS } from '@/utils/constants.js'\r\nimport { \r\n  TokenManager, \r\n  UserManager, \r\n  WechatAuth, \r\n  LoginStateManager \r\n} from '@/utils/auth.js'\r\nimport NavigationGuard from '@/utils/navigationGuard.js'\r\n\r\n/**\r\n * 认证状态管理Store\r\n */\r\nexport const useAuthStore = defineStore('auth', {\r\n  state: () => ({\r\n    // 登录状态\r\n    isLoggedIn: false,\r\n    \r\n    // 用户信息\r\n    user: null,\r\n    \r\n    // 加载状态\r\n    loading: {\r\n      login: false,\r\n      refresh: false,\r\n      profile: false\r\n    },\r\n    \r\n    // Token信息（仅用于状态显示，实际存储在TokenManager中）\r\n    tokenInfo: {\r\n      hasToken: false,\r\n      expiresAt: null\r\n    }\r\n  }),\r\n  \r\n  getters: {\r\n    /**\r\n     * 是否已认证\r\n     */\r\n    isAuthenticated: (state) => {\r\n      return state.isLoggedIn && state.user && TokenManager.getAccessToken()\r\n    },\r\n    \r\n    /**\r\n     * 用户昵称\r\n     */\r\n    userNickname: (state) => {\r\n      return state.user?.nickname || '用户'\r\n    },\r\n    \r\n    /**\r\n     * 用户头像\r\n     */\r\n    userAvatar: (state) => {\r\n      return state.user?.avatar_url || '/static/uni.png'\r\n    },\r\n    \r\n    /**\r\n     * 是否是管理员\r\n     */\r\n    isAdmin: (state) => {\r\n      return state.user?.role_id === 1\r\n    },\r\n    \r\n    /**\r\n     * 用户角色文本\r\n     */\r\n    userRoleText: (state) => {\r\n      if (!state.user) return '未登录'\r\n      return state.user.role_id === 1 ? '管理员' : '普通用户'\r\n    },\r\n    \r\n    /**\r\n     * 登录状态文本\r\n     */\r\n    loginStatusText: (state) => {\r\n      if (state.loading.login) return '登录中...'\r\n      if (state.loading.refresh) return '刷新中...'\r\n      if (!state.isLoggedIn) return '未登录'\r\n      return '已登录'\r\n    },\r\n    \r\n    /**\r\n     * Token是否即将过期\r\n     */\r\n    tokenWillExpire: () => {\r\n      return TokenManager.shouldRefreshToken()\r\n    }\r\n  },\r\n  \r\n  actions: {\r\n    /**\r\n     * 初始化认证状态\r\n     * 应用启动时调用，恢复本地存储的登录状态\r\n     */\r\n    async initAuthState() {\r\n      try {\r\n        console.log('🚀 初始化认证状态')\r\n        \r\n        // 检查本地存储的登录状态\r\n        const isLoggedIn = LoginStateManager.getLoginState()\r\n        const userInfo = UserManager.getUserInfo()\r\n        const hasToken = !!TokenManager.getAccessToken()\r\n        \r\n        if (isLoggedIn && userInfo && hasToken) {\r\n          // 检查Token是否过期\r\n          if (TokenManager.isTokenExpired()) {\r\n            console.log('⚠️ Token已过期，尝试刷新')\r\n            await this.refreshToken()\r\n          } else {\r\n            // 恢复登录状态\r\n            this.isLoggedIn = true\r\n            this.user = userInfo\r\n            this.updateTokenInfo()\r\n            console.log('✅ 登录状态已恢复', userInfo)\r\n          }\r\n        } else {\r\n          // 清除不完整的状态\r\n          this.logout(false)\r\n        }\r\n      } catch (error) {\r\n        console.error('❌ 初始化认证状态失败:', error)\r\n        this.logout(false)\r\n      }\r\n    },\r\n    \r\n    /**\r\n     * 微信小程序登录\r\n     * @param {boolean} requireUserInfo - 是否需要获取用户信息\r\n     * @param {boolean} isRetry - 是否为重试调用\r\n     * @returns {Promise<boolean>} 登录是否成功\r\n     */\r\n    async loginWithWechat(requireUserInfo = false, isRetry = false) {\r\n      if (this.loading.login) {\r\n        throw new Error('正在登录中，请稍候...')\r\n      }\r\n      \r\n      try {\r\n        this.loading.login = true\r\n        console.log('🔐 开始微信登录', { requireUserInfo, isRetry })\r\n        \r\n        // 检查是否支持微信登录\r\n        if (!WechatAuth.isWechatLoginSupported()) {\r\n          throw new Error('当前环境不支持微信登录')\r\n        }\r\n        \r\n        // 获取微信登录Code（重试时强制刷新）\r\n        const code = await WechatAuth.getWechatCode(isRetry)\r\n        \r\n        console.log('📝 准备登录数据', {\r\n          codePrefix: code.substring(0, 8) + '...',\r\n          requireUserInfo,\r\n          timestamp: new Date().toLocaleTimeString()\r\n        })\r\n        \r\n        // 构建登录请求数据\r\n        const loginData = { code }\r\n        \r\n        // 如果需要用户信息，获取用户授权\r\n        if (requireUserInfo) {\r\n          try {\r\n            const userProfile = await WechatAuth.getUserProfile()\r\n            Object.assign(loginData, {\r\n              encryptedData: userProfile.encryptedData,\r\n              iv: userProfile.iv,\r\n              signature: userProfile.signature\r\n            })\r\n            console.log('👤 已获取用户信息，准备完整登录')\r\n          } catch (profileError) {\r\n            console.warn('⚠️ 用户取消授权，仅进行基础登录')\r\n          }\r\n        }\r\n        \r\n        // 调用登录API\r\n        const response = await request.post(API_ENDPOINTS.AUTH.LOGIN, loginData, {\r\n          needAuth: false,\r\n          showLoading: false\r\n        })\r\n        \r\n        // 保存认证信息\r\n        this.saveAuthData(response)\r\n        \r\n        console.log('✅ 微信登录成功')\r\n        return true\r\n        \r\n      } catch (error) {\r\n        console.error('❌ 微信登录失败:', error)\r\n        \r\n        // 登录失败时清除code缓存\r\n        WechatAuth.clearCodeCache()\r\n        \r\n        // 检查是否为code相关错误\r\n        if (this.isCodeRelatedError(error)) {\r\n          console.log('🔄 检测到code相关错误，准备重试')\r\n          \r\n          // 如果不是重试调用且错误与code相关，则尝试重试一次\r\n          if (!isRetry) {\r\n            console.log('🔄 自动重试登录（使用新code）')\r\n            await this.delay(1000) // 延迟1秒后重试\r\n            return await this.loginWithWechat(requireUserInfo, true)\r\n          }\r\n        }\r\n        \r\n        throw error\r\n      } finally {\r\n        this.loading.login = false\r\n      }\r\n    },\r\n    \r\n    /**\r\n     * 检查是否为code相关错误\r\n     * @param {Error} error - 错误对象\r\n     * @returns {boolean} 是否为code相关错误\r\n     */\r\n    isCodeRelatedError(error) {\r\n      const errorMsg = error.message?.toLowerCase() || ''\r\n      return errorMsg.includes('code') && \r\n             (errorMsg.includes('been used') || \r\n              errorMsg.includes('invalid') ||\r\n              errorMsg.includes('expired'))\r\n    },\r\n    \r\n    /**\r\n     * 延迟函数\r\n     * @param {number} ms - 延迟毫秒数\r\n     * @returns {Promise<void>}\r\n     */\r\n    delay(ms) {\r\n      return new Promise(resolve => setTimeout(resolve, ms))\r\n    },\r\n    \r\n    /**\r\n     * 刷新Token\r\n     * @returns {Promise<void>}\r\n     */\r\n    async refreshToken() {\r\n      if (this.loading.refresh) {\r\n        return\r\n      }\r\n      \r\n      const refreshToken = TokenManager.getRefreshToken()\r\n      if (!refreshToken) {\r\n        throw new Error('没有刷新令牌，请重新登录')\r\n      }\r\n      \r\n      try {\r\n        this.loading.refresh = true\r\n        console.log('🔄 刷新Token')\r\n        \r\n        const response = await request.post(API_ENDPOINTS.AUTH.REFRESH, {\r\n          refreshToken\r\n        }, {\r\n          needAuth: false,\r\n          showLoading: false\r\n        })\r\n        \r\n        // 更新Token信息\r\n        TokenManager.setTokens(response)\r\n        this.updateTokenInfo()\r\n        \r\n        console.log('✅ Token刷新成功')\r\n        \r\n      } catch (error) {\r\n        console.error('❌ Token刷新失败:', error)\r\n        // 刷新失败，清除登录状态\r\n        this.logout(false)\r\n        throw error\r\n      } finally {\r\n        this.loading.refresh = false\r\n      }\r\n    },\r\n    \r\n    /**\r\n     * 获取用户资料\r\n     * @returns {Promise<void>}\r\n     */\r\n    async getUserProfile() {\r\n      if (!this.isAuthenticated) {\r\n        throw new Error('用户未登录')\r\n      }\r\n      \r\n      try {\r\n        this.loading.profile = true\r\n        console.log('👤 获取用户资料')\r\n        \r\n        const userInfo = await request.get(API_ENDPOINTS.AUTH.PROFILE)\r\n        \r\n        // 更新用户信息\r\n        this.user = userInfo\r\n        UserManager.setUserInfo(userInfo)\r\n        \r\n        console.log('✅ 用户资料获取成功')\r\n        \r\n      } catch (error) {\r\n        console.error('❌ 获取用户资料失败:', error)\r\n        throw error\r\n      } finally {\r\n        this.loading.profile = false\r\n      }\r\n    },\r\n    \r\n    /**\r\n     * 更新用户资料\r\n     * @param {Object} updateData - 更新数据\r\n     * @returns {Promise<void>}\r\n     */\r\n    async updateUserProfile(updateData) {\r\n      if (!this.isAuthenticated) {\r\n        throw new Error('用户未登录')\r\n      }\r\n      \r\n      try {\r\n        console.log('📝 更新用户资料', updateData)\r\n        \r\n        const updatedUser = await request.put(API_ENDPOINTS.AUTH.PROFILE, updateData)\r\n        \r\n        // 更新本地用户信息\r\n        this.user = updatedUser\r\n        UserManager.setUserInfo(updatedUser)\r\n        \r\n        console.log('✅ 用户资料更新成功')\r\n        \r\n        uni.showToast({\r\n          title: '资料更新成功',\r\n          icon: 'success'\r\n        })\r\n        \r\n      } catch (error) {\r\n        console.error('❌ 更新用户资料失败:', error)\r\n        uni.showToast({\r\n          title: error.message || '更新失败',\r\n          icon: 'error'\r\n        })\r\n        throw error\r\n      }\r\n    },\r\n    \r\n    /**\r\n     * 退出登录\r\n     * @param {boolean} callApi - 是否调用登出API\r\n     * @returns {Promise<void>}\r\n     */\r\n    async logout(callApi = true) {\r\n      try {\r\n        console.log('🚪 用户退出登录')\r\n        \r\n        // 调用登出API\r\n        if (callApi && this.isAuthenticated) {\r\n          try {\r\n            await request.post(API_ENDPOINTS.AUTH.LOGOUT)\r\n          } catch (apiError) {\r\n            console.warn('⚠️ 调用登出API失败，继续本地登出', apiError)\r\n          }\r\n        }\r\n        \r\n        // 清除所有认证相关数据\r\n        this.clearAuthData()\r\n        \r\n        // 跳转到首页\r\n        uni.reLaunch({\r\n          url: '/pages/index/index'\r\n        })\r\n        \r\n        uni.showToast({\r\n          title: '已退出登录',\r\n          icon: 'success'\r\n        })\r\n        \r\n      } catch (error) {\r\n        console.error('❌ 退出登录过程出错:', error)\r\n      }\r\n    },\r\n    \r\n    /**\r\n     * 检查登录状态\r\n     * @returns {boolean} 是否已登录\r\n     */\r\n    checkAuthStatus() {\r\n      const hasToken = !!TokenManager.getAccessToken()\r\n      const isExpired = TokenManager.isTokenExpired()\r\n      const hasUser = !!this.user\r\n      const stateLoggedIn = this.isLoggedIn\r\n      \r\n      const actuallyLoggedIn = hasToken && !isExpired && hasUser && stateLoggedIn\r\n      \r\n      if (this.isLoggedIn !== actuallyLoggedIn) {\r\n        this.isLoggedIn = actuallyLoggedIn\r\n        if (!actuallyLoggedIn) {\r\n          this.clearAuthData()\r\n        }\r\n      }\r\n      \r\n      return actuallyLoggedIn\r\n    },\r\n    \r\n    /**\r\n     * 保存认证数据\r\n     * @param {Object} authData - 认证数据\r\n     * @param {string} authData.accessToken - 访问令牌\r\n     * @param {string} authData.refreshToken - 刷新令牌\r\n     * @param {string} authData.expiresIn - 过期时间\r\n     * @param {Object} authData.user - 用户信息\r\n     */\r\n    saveAuthData(authData) {\r\n      const { accessToken, refreshToken, expiresIn, user } = authData\r\n      \r\n      // 保存Token\r\n      TokenManager.setTokens({\r\n        accessToken,\r\n        refreshToken,\r\n        expiresIn\r\n      })\r\n      \r\n      // 保存用户信息\r\n      UserManager.setUserInfo(user)\r\n      \r\n      // 保存登录状态\r\n      LoginStateManager.setLoginState(true)\r\n      \r\n      // 更新Store状态\r\n      this.isLoggedIn = true\r\n      this.user = user\r\n      this.updateTokenInfo()\r\n      \r\n      console.log('💾 认证数据已保存')\r\n    },\r\n    \r\n    /**\r\n     * 清除认证数据\r\n     */\r\n    clearAuthData() {\r\n      // 清除Token\r\n      TokenManager.clearTokens()\r\n      \r\n      // 清除用户信息\r\n      UserManager.clearUserInfo()\r\n      \r\n      // 清除登录状态\r\n      LoginStateManager.clearLoginState()\r\n      \r\n      // 重置Store状态\r\n      this.isLoggedIn = false\r\n      this.user = null\r\n      this.tokenInfo = {\r\n        hasToken: false,\r\n        expiresAt: null\r\n      }\r\n      \r\n      console.log('🗑️ 认证数据已清除')\r\n    },\r\n    \r\n    /**\r\n     * 更新Token信息（用于UI显示）\r\n     */\r\n    updateTokenInfo() {\r\n      const hasToken = !!TokenManager.getAccessToken()\r\n      const expiresAt = uni.getStorageSync('token_expires_at')\r\n      \r\n      this.tokenInfo = {\r\n        hasToken,\r\n        expiresAt\r\n      }\r\n    },\r\n    \r\n    /**\r\n     * 强制刷新用户信息\r\n     */\r\n    async forceRefreshUser() {\r\n      if (!this.isAuthenticated) return\r\n      \r\n      try {\r\n        await this.getUserProfile()\r\n      } catch (error) {\r\n        console.warn('⚠️ 强制刷新用户信息失败:', error)\r\n      }\r\n    }\r\n  }\r\n})\r\n"],"names":["defineStore","TokenManager","uni","LoginStateManager","UserManager","WechatAuth","request","API_ENDPOINTS"],"mappings":"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"}