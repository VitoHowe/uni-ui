{"version":3,"file":"upload.js","sources":["stores/upload.js"],"sourcesContent":["import { defineStore } from 'pinia'\r\nimport { upload } from '@/utils/request.js'\r\nimport { API_ENDPOINTS } from '@/utils/constants.js'\r\n\r\nexport const useUploadStore = defineStore('upload', {\r\n  state: () => ({\r\n    // 当前文件类型 (0: 知识点, 1: 题库)\r\n    currentFileType: 0,\r\n    \r\n    // 文件列表\r\n    filesList: [],\r\n    \r\n    // 上传状态\r\n    uploadStatus: {\r\n      uploading: false,\r\n      progress: {\r\n        show: false,\r\n        current: 0,\r\n        total: 0,\r\n        percent: 0\r\n      }\r\n    },\r\n    \r\n    // 上传历史记录\r\n    uploadHistory: [\r\n      {\r\n        id: 1,\r\n        fileName: '项目管理基础知识.docx',\r\n        fileType: '知识点',\r\n        uploadTime: '2024-01-15 14:30',\r\n        status: '成功',\r\n        fileSize: '2.5MB',\r\n        recordCount: 156\r\n      },\r\n      {\r\n        id: 2,\r\n        fileName: '模拟考试题库.xlsx',\r\n        fileType: '题库',\r\n        uploadTime: '2024-01-14 16:45',\r\n        status: '失败',\r\n        fileSize: '1.8MB',\r\n        errorMessage: '文件格式不正确'\r\n      }\r\n    ],\r\n    \r\n    // 配置信息\r\n    config: {\r\n      // 文件类型选项\r\n      fileTypeOptions: ['知识点', '题库'],\r\n      \r\n      // 允许的文件扩展名\r\n      allowedExtensions: {\r\n        0: ['doc', 'docx', 'pdf', 'txt', 'md'], // 知识点\r\n        1: ['xlsx', 'xls', 'csv', 'json']       // 题库\r\n      },\r\n      \r\n      // 文件大小限制 (MB)\r\n      maxFileSize: 10,\r\n      \r\n      // 最大文件数量\r\n      maxFileCount: 5,\r\n      \r\n      // 文件类型描述\r\n      typeDescriptions: {\r\n        0: '上传知识点文档，系统将自动解析并分类存储学习内容',\r\n        1: '上传题库文件，系统将解析题目、选项和答案信息'\r\n      }\r\n    }\r\n  }),\r\n  \r\n  getters: {\r\n    // 获取当前文件类型文本\r\n    currentFileTypeText: (state) => {\r\n      return state.config.fileTypeOptions[state.currentFileType]\r\n    },\r\n    \r\n    // 获取当前允许的文件扩展名\r\n    currentAllowedExtensions: (state) => {\r\n      return state.config.allowedExtensions[state.currentFileType]\r\n    },\r\n    \r\n    // 获取当前文件类型描述\r\n    currentTypeDescription: (state) => {\r\n      return state.config.typeDescriptions[state.currentFileType]\r\n    },\r\n    \r\n    // 获取上传进度百分比\r\n    uploadProgressPercent: (state) => {\r\n      const { current, total } = state.uploadStatus.progress\r\n      return total > 0 ? Math.round((current / total) * 100) : 0\r\n    },\r\n    \r\n    // 获取成功上传的记录数量\r\n    successUploadCount: (state) => {\r\n      return state.uploadHistory.filter(record => record.status === '成功').length\r\n    },\r\n    \r\n    // 获取失败上传的记录数量\r\n    failedUploadCount: (state) => {\r\n      return state.uploadHistory.filter(record => record.status === '失败').length\r\n    }\r\n  },\r\n  \r\n  actions: {\r\n    // 设置文件类型\r\n    setFileType(typeIndex) {\r\n      this.currentFileType = typeIndex\r\n      // 切换类型时清空文件列表\r\n      this.clearFiles()\r\n    },\r\n    \r\n    // 添加文件到列表\r\n    addFiles(files) {\r\n      // 验证文件数量\r\n      const totalCount = this.filesList.length + files.length\r\n      if (totalCount > this.config.maxFileCount) {\r\n        const message = `最多只能选择${this.config.maxFileCount}个文件`\r\n        uni.showToast({ title: message, icon: 'none' })\r\n        return false\r\n      }\r\n      \r\n      // 验证文件类型和大小\r\n      const validFiles = []\r\n      for (const file of files) {\r\n        if (this.validateFile(file)) {\r\n          validFiles.push({\r\n            ...file,\r\n            id: Date.now() + Math.random(),\r\n            uploadStatus: 'pending'\r\n          })\r\n        }\r\n      }\r\n      \r\n      this.filesList.push(...validFiles)\r\n      return validFiles.length > 0\r\n    },\r\n    \r\n    // 验证单个文件\r\n    validateFile(file) {\r\n      // 验证文件扩展名\r\n      const extension = this.getFileExtension(file.name)\r\n      if (!this.currentAllowedExtensions.includes(extension)) {\r\n        uni.showToast({\r\n          title: `不支持${extension}格式文件`,\r\n          icon: 'none'\r\n        })\r\n        return false\r\n      }\r\n      \r\n      // 验证文件大小\r\n      const fileSizeMB = file.size / (1024 * 1024)\r\n      if (fileSizeMB > this.config.maxFileSize) {\r\n        uni.showToast({\r\n          title: `文件大小不能超过${this.config.maxFileSize}MB`,\r\n          icon: 'none'\r\n        })\r\n        return false\r\n      }\r\n      \r\n      return true\r\n    },\r\n    \r\n    // 获取文件扩展名\r\n    getFileExtension(fileName) {\r\n      return fileName.split('.').pop().toLowerCase()\r\n    },\r\n    \r\n    // 清空文件列表\r\n    clearFiles() {\r\n      this.filesList = []\r\n    },\r\n    \r\n    // 移除单个文件\r\n    removeFile(fileId) {\r\n      const index = this.filesList.findIndex(file => file.id === fileId)\r\n      if (index > -1) {\r\n        this.filesList.splice(index, 1)\r\n      }\r\n    },\r\n    \r\n    // 开始上传\r\n    async startUpload() {\r\n      if (this.filesList.length === 0) {\r\n        uni.showToast({ title: '请先选择文件', icon: 'none' })\r\n        return false\r\n      }\r\n      \r\n      if (this.uploadStatus.uploading) {\r\n        uni.showToast({ title: '正在上传中...', icon: 'none' })\r\n        return false\r\n      }\r\n      \r\n      this.uploadStatus.uploading = true\r\n      this.uploadStatus.progress = {\r\n        show: true,\r\n        current: 0,\r\n        total: this.filesList.length,\r\n        percent: 0\r\n      }\r\n      \r\n      try {\r\n        await this.processUpload()\r\n        uni.showToast({ title: '上传完成', icon: 'success' })\r\n      } catch (error) {\r\n        console.error('上传过程出错:', error)\r\n        uni.showToast({ title: '上传过程出错', icon: 'error' })\r\n      } finally {\r\n        this.uploadStatus.uploading = false\r\n        this.uploadStatus.progress.show = false\r\n      }\r\n    },\r\n    \r\n    // 处理上传过程\r\n    async processUpload() {\r\n      for (let i = 0; i < this.filesList.length; i++) {\r\n        const file = this.filesList[i]\r\n        this.uploadStatus.progress.current = i + 1\r\n        this.uploadStatus.progress.percent = Math.round(((i + 1) / this.filesList.length) * 100)\r\n        \r\n        try {\r\n          const result = await this.uploadSingleFile(file)\r\n          this.addToHistory({\r\n            fileName: file.name,\r\n            fileType: this.currentFileTypeText,\r\n            uploadTime: new Date().toLocaleString('zh-CN'),\r\n            status: '成功',\r\n            fileSize: this.formatFileSize(file.size),\r\n            recordCount: result.recordCount || 0\r\n          })\r\n        } catch (error) {\r\n          this.addToHistory({\r\n            fileName: file.name,\r\n            fileType: this.currentFileTypeText,\r\n            uploadTime: new Date().toLocaleString('zh-CN'),\r\n            status: '失败',\r\n            fileSize: this.formatFileSize(file.size),\r\n            errorMessage: error.message || '上传失败'\r\n          })\r\n        }\r\n        \r\n        // 模拟上传延迟\r\n        await new Promise(resolve => setTimeout(resolve, 1000))\r\n      }\r\n      \r\n      // 上传完成后清空文件列表\r\n      this.clearFiles()\r\n    },\r\n    \r\n    // 上传单个文件 (调用真实API)\r\n    async uploadSingleFile(file) {\r\n      try {\r\n        console.log('📤 开始上传文件:', file.name)\r\n        console.log('🔗 上传API端点:', API_ENDPOINTS.FILES.UPLOAD)\r\n        \r\n        // 准备表单数据\r\n        const formData = {\r\n          name: file.name,\r\n          description: `${this.currentFileTypeText}文件`,\r\n          type: this.currentFileType\r\n        }\r\n        \r\n        console.log('📋 表单数据:', formData)\r\n        \r\n        // 调用上传API\r\n        const result = await upload(\r\n          API_ENDPOINTS.FILES.UPLOAD,\r\n          file.path || file.url,\r\n          formData\r\n        )\r\n        \r\n        console.log('✅ 文件上传成功:', result)\r\n        \r\n        return {\r\n          success: true,\r\n          recordCount: result.parsed_questions || 0,\r\n          fileId: result.id\r\n        }\r\n      } catch (error) {\r\n        console.error('❌ 文件上传失败:', error)\r\n        throw new Error(error.message || '文件上传失败')\r\n      }\r\n    },\r\n    \r\n    // 添加到上传历史\r\n    addToHistory(record) {\r\n      const newRecord = {\r\n        ...record,\r\n        id: Date.now() + Math.random()\r\n      }\r\n      this.uploadHistory.unshift(newRecord)\r\n      \r\n      // 限制历史记录数量\r\n      if (this.uploadHistory.length > 50) {\r\n        this.uploadHistory.pop()\r\n      }\r\n    },\r\n    \r\n    // 清空上传历史\r\n    clearHistory() {\r\n      this.uploadHistory = []\r\n    },\r\n    \r\n    // 删除单条历史记录\r\n    deleteHistoryRecord(recordId) {\r\n      const index = this.uploadHistory.findIndex(record => record.id === recordId)\r\n      if (index > -1) {\r\n        this.uploadHistory.splice(index, 1)\r\n      }\r\n    },\r\n    \r\n    // 格式化文件大小\r\n    formatFileSize(bytes) {\r\n      if (bytes === 0) return '0 B'\r\n      const k = 1024\r\n      const sizes = ['B', 'KB', 'MB', 'GB']\r\n      const i = Math.floor(Math.log(bytes) / Math.log(k))\r\n      return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i]\r\n    },\r\n    \r\n    // 获取状态图标\r\n    getStatusIcon(status) {\r\n      const icons = {\r\n        '成功': 'checkmarkempty',\r\n        '失败': 'closeempty',\r\n        '处理中': 'spinner-cycle'\r\n      }\r\n      return icons[status] || 'help'\r\n    },\r\n    \r\n    // 获取状态颜色\r\n    getStatusColor(status) {\r\n      const colors = {\r\n        '成功': '#28a745',\r\n        '失败': '#dc3545',\r\n        '处理中': '#007AFF'\r\n      }\r\n      return colors[status] || '#666'\r\n    }\r\n  }\r\n})\r\n"],"names":["defineStore","uni","API_ENDPOINTS","upload"],"mappings":"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"}